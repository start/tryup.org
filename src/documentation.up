################################################
Up (easily write structured content for the web)
################################################


Up is a set of [highlight: human-friendly conventions] for writing structured documents in plain text. This entire document was written in Up.

For software developers, [Up is also a JavaScript library] (npmjs.com/package/write-up) that converts those writing conventions into HTML.

========================
What's so good about Up?
========================

Up is designed for humans to read and write, not for computers to process and parse. At every turn, Up offers convenience for humans.


- Up lets you overlap styles
  ==========================

  Other lightweight markup languages require styles to be manually nested within each other like [Russian nesting dolls] (wikipedia.org/wiki/Matryoshka_doll).

  However, Up **supports [highlight: overlapping** styles]!

  Even if you are content to nest your styles within one another, this feature helps if you accidentally transpose characters while nesting. For more information, see [topic: overlapping styles].

- Up supports outrageously easy tables
  ====================================

  You'll want to use them everywhere.

  Table: Moves learned by the Pokémon Bulbasaur

  Level;  Move;         Type;     Power;  Accuracy
  1;      Tackle;       Normal;   50;     100%
  3;      Growl;        Normal;   ;       100%
  7;      Leech Seed;   Grass;    ;       90%
  9;      Vine Whip;    Grass;    45;     100%

  For more information, see [topic: tables].

- Up has effortless footnotes
  ===========================

  You write your footnotes inline, as though were parentheticals. [^If you think about it, footnotes are essentially parentheticals.] They're automatically extracted and placed into footnote blocks. [^ The author doesn't have to do any work.]

  For more information, see [topic: footnotes].

- Linking to another section in your document is simple
  =====================================================

  Markup
    ````
    For more information, see [topic: section links].
    ````

  Output
    For more information, see [topic: section links].

  That's all it takes! Simply reference snippet of a text from the section's title ("section links", in the above example).

  Up figures out which section you want to reference, and automatically produces a link to that section.

- Up is actually, honestly readable in plain text
  ===============================================

  Too many lightweight markup languages devolve into a dense soup of confusing symbols and punctuation.

  When a word would provide more clarity than a symbol, Up takes advantage of that! Many conventions, including [topic: tables] and [topic: spoilers], incorporate words. And as a result, its plain text markup is a joy to read.

  These syntax terms are fully customizable! They can support any language (and multiple languages at once). For more information, see [topic: terms found in markup].

- Up produces fully accessible HTML
  =================================

  From the table of contents to the last movie-ruining spoiler, Up produces fully-accessible HTML. This means people who have trouble viewing a screen or a using mouse can enjoy every document.



################################################
Writing conventions (the rules and syntax of Up)
################################################


Don't get lost! The following terms are occasionally used in this section:

Inline convention
  Any writing convention that can be used inside paragraphs, including [topic: emphasis] and [topic: highlighting].

Outline convention
  Any *non-inline* writing convention, incuding [topic: paragraphs] and [topic: tables].


========
Emphasis
========

Purpose
  Use the emphasis convention to emphasize a word or phrase.

  If the reader should pronounce a word or phrase differently (e.g. to indicate contrast or sarcasm), consider emphasizing it.

Example
  Markup
    ````
    Only eat the *green* grapes. The red grapes are for Pikachu.
    ````

  Output
    Only eat the *green* grapes. The red grapes are for Pikachu.

Syntax
  To emphasize text, enclose it within single asterisks.

Notes
  Emphasized text is rendered using the `<em>` HTML element.


======
Stress
======

Purpose
  Use the stress convention to indicate a word or phrase is particularly important.

  If the reader should raise their voice while reading a word or phrase, consider stressing it.

Example
  Markup
    ````
    Do **not** step on the dinosaur!
    ````

  Output
    Do **not** step on the dinosaur!

Syntax
  To stress text, enclose it within double asterisks.

Notes
  Stressed text is rendered using the `<strong>` HTML element.


=======
Italics
=======

Purpose
  Use the italic convention to stylistically offset a word or phrase from the surrounding text. The titles of books and movies should probably be italicized.

  Some authors also use italics for unfamiliar foreign words.

Example
  Markup
    ````
    My favorite video game is _Chrono Cross_.
    ````

  Output
    My favorite video game is _Chrono Cross_.

Syntax
  To italicize text, enclose it within single underscores.

Notes
  Italics are rendered using the `<i>` HTML element.


====
Bold
====

Purpose
  If you want to make a word or phrase bold without conveying any extra importance, use the bold convention.

  This convention should be used rarely. Usually, there's a more appropriate convention!

  If you want to highlight text, see [topic: highlighting]. If you want to indicate the importance of a word of phrase, see [topic: stress].

Example
  Markup
    ````
    Has anyone actually used __KABOOM__ cleaning products?
    ````

  Output
    Has anyone actually used  __KABOOM__ cleaning products?

Syntax
  To make text bold, enclose it within double underscores.

Notes
  Bold text is rendered using the `<b>` HTML element.


================================================
Parentheticals (parentheses and square brackets)
================================================

Purpose
  Up automatically recognizes parenthetical text!

  You don't need to change how you use parentheses or square brackets.

Example
  Markup
    ````
    When I was ten years old, I left my home (in Pallet Town) to search for Pokémon.
    ````

  Output
    When I was ten years old, I left my home (in Pallet Town) to search for Pokémon.

Syntax
  You already know how to use parentheses and square brackets! Up understands that text enclosed within them represents supplemental, de-emphasized content.

Notes
  Parenthetical text is rendered using the `<small>` HTML element.


============
Highlighting
============

Purpose
  Use the highlight convention to indicate a word a phrase is particularly relevant to the reader.

  Highlighted text is for drawing attention to text without altering its semantics. It should *not* be used to emphasize or stress text; if that's your purpose, see [topic: emphasis] or [topic: stress].

Example
  Markup
    ````
    Our cupcakes are vegan, [highlight: gluten-free], and made using only the most expensive ingredients.
    ````

  Output
    Our cupcakes are vegan, [highlight: gluten-free], and made using only the most expensive ingredients.

Syntax
  To highlight text, enclose it within square brackets or parentheses. Then, insert "highlight:" directly after your open bracket.

Notes
  Highlighted text is rendered using the `<mark>` HTML element.


=============
Example input
=============

Purpose
  Use the example input convention to represent user input, including:

  - Keys the user should press
  - Buttons the user should click
  - Menu items the user should access

Example
  Markup
    ````
     Press {esc} to quit.
    ````

  Output
    Press {esc} to quit.

Syntax
  To indicate text represents user input, enclose the text within curly brackets.

  To allow for more readable markup, Up ignores any spaces separating the curly brackets from the content they enclose.

  Markup
    ````
    Press { Start Game(s) } when you are ready.
    ````
  Output
    Press { Start Game(s) } when you are ready.

  Within example input, most conventions are not evaluated. However, [topic: typography] and [topic: escaping] are both respected.

Notes
  Example input is rendered using the `<kbd>` HTML element.


===========
Inline code
===========

Purpose
  Use the inline code convention to represent a small fragment of computer code.

  If you need to represent more than a small fragment of computer code, use [topic: code blocks].

Example
  Markup
    ````
    In HTML, you probably shouldn't use the `<font>` element.
    ````

  Output
    In HTML, you probably shouldn't use the `<font>` element.

Syntax
  To indicate text is a fragment of computer code, surround it with an equal number of backticks on either side.

  Within your inline code, every single character is treated literally. No conventions are evaluated, not even [topic: escaping]!


  Including backticks in your inline code
  =======================================

  Inline code can contain streaks of backticks that aren't exactly as long as the enclosing delimiters.

  In this example, the delimiters are **1** backtick long, so the inline code can contain streaks of **2** backticks:

  Markup
    `````
    `let display = ``score:`` + 5`
    `````

  Output
    `let display = ``score:`` + 5`

  In this example, the delimiters are **2** backticks long, so the inline code can contain "streaks" of **1** backtick:

  Markup
    `````
    ``let display = `score:` + 5``
    `````

  Output
    ``let display = `score:` + 5``

  ---------------------------------------------------
  But my inline code starts (or ends) with backticks!
  ---------------------------------------------------

  If your inline code starts or ends with backticks, place a single space between the offending backticks and the outer delimiter. This single space is trimmed away. Here's an example of inline code that both starts and ends with backticks:

  Markup
    `` `inline_code` ``

  Output
    `` `inline_code` ``

  Anything beyond that single space is preserved. If there are two spaces between the delimiter and the starting/ending backticks, only one is trimmed away.

  Furthermore, that single space is only trimmed away when it's used to separate a delimiter from backticks in your inline code. If a given "side" of inline code has any non-space characters between the delimiter and the first backtick, nothing gets trimmed from that side.

  Markup
    `` (`inline_code`) ``

  Output
    `` (`inline_code`) ``

Notes
  Inline code is rendered using the `<code>` HTML element.


=========
Footnotes
=========

Purpose
  Use the footnote convention for asides or citations---anything you want to say without breaking the flow of a paragraph.

  Footnotes are automatically extracted into blocks for you.

Example
  Markup
    ````
    Pokémon Red begins in Pallet Town, [^ "Pallet" was probably a misspelling of "palette".] where Professor Oak gives Red his first Pokémon.
    ````

  Output
    Pokémon Red begins in Pallet Town, [^ "Pallet" was probably a misspelling of "palette".] where Professor Oak gives Red his first Pokémon.

Syntax
  Enclose the content of the footnote within parentheses or square brackets. Then, insert a caret (`^`) directly after your opening bracket.

Notes
  Within your paragraph, footnotes are replaced by superscripts containing the ordinal of the footnote within the document. These superscripts link to the actual content of the footnote in its footnote block.


===========
Code blocks
===========

Purpose
  Use the code block convention to represent a block of computer code.

  If you need to reference only a small fragment of computer code, use [topic: Up.Inline code].

Example
  Markup
    ````````
    ```
    function nthFibonacci(n: number): number {
      return (
        n <= 2
        ? n - 1
        : nthFibonacci(n - 1) + nthFibonacci(n - 2))
    }
    ```
    ````````

  Output
    ```
    function nthFibonacci(n: number): number {
      return (
        n <= 2
        ? n - 1
        : nthFibonacci(n - 1) + nthFibonacci(n - 2))
    }
    ```

Syntax
  Code blocks are surrounded (underlined and "overlined") by matching streaks of 3 or more backticks.

  If no matching end streak is found, the code block extends to the end of the document (or to the end of the current outline convention, if the code block is nested within one).

  Within your code block, indentation is preserved, and every single character is treated literally. No conventions are evaluated, not even [topic: escaping]!


  Including streaks of backticks within your code block
  =====================================================

  Code blocks can contain streaks of backticks that aren't exactly as long as the enclosing streaks.

  Markup
    `````````
    ``````
    A code block:

    ```
    function factorial(n: number): number {
      return (
        n <= 1
          ? 1
          : n * factorial(n - 1))
    }
    ```

    See? Not so hard!
    ``````
    `````````

  Output
    ``````
    A code block:

    ```
    function factorial(n: number): number {
      return (
        n <= 1
          ? 1
          : n * factorial(n - 1))
    }
    ```

    See? Not so hard!
    ``````

Notes
  Code blocks are rendered using nested `<pre>` and `<code>` HTML elements.


==============
Bulleted lists
==============

Purpose
  Use the bulleted list convention to represent lists whose order is *not* particularly important.

  Bulleted lists can contain any outline convention, even other bulleted lists!

Example
  Markup
    ````
    - Buy milk
    - Buy bread
    - Buy happiness
    ````

  Output
    - Buy milk
    - Buy bread
    - Buy happiness

Syntax
  Bullets
  =======

  Every item in a bulleted list starts with a bullet followed by a space. The following markup characters can serve as a bullet:

  - An asterisk: `*`
  - A hyphen: `-`
  - An actual bullet character: `•`

  Spacing between list items
  ===========================

  Each list item can be followed by a single blank line. This has no impact on the list itself:

  Markup
    ````
    - Buy milk

    - Buy bread

    - Buy happiness
    ````

  Output
    - Buy milk

    - Buy bread

    - Buy happiness

  On the other hand, if a list item is followed by 2 blank lines, it terminates the list.

    Markup
    ````
    - Buy milk
    - Buy bread


    - Fix squeaky cabinet
    - Fix self-esteem
    ````

  Output
    - Buy milk
    - Buy bread


    - Fix squeaky cabinet
    - Fix self-esteem


  Including other outline conventions within list items
  =====================================================




####################
Using the Up library
####################

The Up library can be found [on NPM] (npmjs.com/package/write-up).


============
Installation
============

There's nothing special about installing Up:

````
npm install write-up --save-dev
````


==============
Usage Overview
==============

First, `require` the library:

````
const Up = require('write-up')
````

If you are using [TypeScript] (typescriptlang.org), use:

````
import * as Up from 'write-up'
````

Okay! `Up` now serves as the namespace for the library.

Typically, you'll want to call the various functions in within that namespace: 

``` 
const html = Up.parseAndRender(markup, settings)
```

For a full description of the functions you can use, please see [topic: functions].

Alternatively, you can create an instance of the `Up.Transformer` class. This can be useful if you need to parse or render several documents all sharing custom settings. For more information, see [topic: Up.Transformer].


=========
Functions
=========


`Up.parseAndRender`
==================

Summary
  This method converts Up markup into HTML and returns the result.

Arguments
  `markup`: `string`
    The Up markup to convert into HTML.
  `settings` (optional): [topic: Up.UserProvidedSettings]
    The custom parsing and/or rendering settings to apply.

Return value
  This method returns a `string` of HTML representing the rendered document.

Usage
  Without custom settings
    ````
    const html = Up.parseAndRender(markup)
    ````

  With custom settings
    ````
    const html = Up.parseAndRender(markup, {
      parsing: {
        createSourceMap: true,
        terms: { highlight: 'mark' }
      },
      rendering: {
        idPrefix: 'article'
      }
    })
    ````


`Up.parseAndRenderDocumentAndTableOfContents`
=============================================

Summary
  This method converts Up markup into two pieces of HTML, both of which are returned:

  1. A table of contents
  2. The document itself

Arguments
  `markup`: `string`
    The Up markup to parse and render.
  `settings` (optional): [topic: Up.UserProvidedSettings]
    The custom parsing and/or rendering settings to apply.

Return value
  This method returns an object with two fields:

  `tableOfContentsHtml`
    The HTML for the table of contents.
  `documentHtml`
    The HTML for the document itself.

Usage
  Without custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      Up.parseAndRenderDocumentAndTableOfContents(markup)
    ````

  With custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      Up.parseAndRenderDocumentAndTableOfContents(markup, {
        parsing: {
          createSourceMap: true,
          terms: { highlight: 'mark' }
        },
        rendering: {
          idPrefix: 'article',
          terms: { tableOfContents: 'In This Article' }
        }
      })
    ````


`Up.parseAndRenderInline`
=========================

Summary
  This method converts inline Up markup into inline HTML and returns the result.

  For more information about inline documents, see [topic: Up.Inline documents].

Arguments
  `inlineMarkup`: `string`
    The inline Up markup to convert into inline HTML.
  `parsingSettings` (optional): [topic: Up.UserProvidedSettings]
    The custom parsing and/or rendering settings to apply.

Return value
  This method returns a `string` of HTML representing the rendered inline document.

Usage
  Without custom settings
    ````
    const html = Up.parseAndRenderInline(markup)
    ````

  With custom settings
    ````
    const html = Up.parseAndRenderInline(markup, {
      parsing: {
        baseForUrlsStartingWithSlash: 'https://example.com/en-us',',
        terms: { highlight: 'mark' }
      },
      rendering: {
        idPrefix: 'byline',
        terms: {
          toggleSpoiler: 'toggle',
          toggleNsfw: 'toggle',
          toggleNsfl: 'toggle'
        }
      }
    })
    ````


`Up.parse`
==========

Summary
  This method parses Up markup and returns the resulting syntax tree.

Arguments
  `markup`: `string`
    The Up markup to parse.

  `parsingSettings` (optional): [topic: Up.UserProvidedSettings.Parsing]
    The custom parsing settings to apply.

Return value
  This method returns a [topic: Document] representing the syntax tree.

Usage
  Without custom settings
    ````
    const html = Up.parse(markup)
    ````

  With custom settings
    ````
    const document = Up.parse(markup, {
      createSourceMap: true,
      terms: { highlight: 'mark' }
    })
    ````


`Up.parseInline`
================

Summary
  This method parses inline Up markup and returns the resulting inline syntax tree.

  For more information about inline documents, see [topic: Up.Inline documents].

Arguments
  `inlineMarkup`: `string`
    The inline Up markup to parse.

  `parsingSettings` (optional): [topic: Up.UserProvidedSettings.Parsing]
    The custom parsing settings to apply.

Return value
  This method returns an [topic: Up.InlineDocument] representing the syntax tree.

Usage
  Without custom settings
    ````
    const html = Up.parseInline(markup)
    ````

  With custom settings
    ````
    const html = Up.parseInline(markup, {
      baseForUrlsStartingWithSlash: 'https://example.com/en-us',',
      terms: { highlight: 'mark' }
    })
    ````


`Up.render`
===========

Summary
  This method converts a syntax tree into HTML and returns the result.

Arguments
  `document`: [topic: Document]
    The syntax tree to convert into HTML.

  `renderingSettings` (optional): [topic: Up.UserProvidedSettings.Rendering]
    The custom rendering settings to apply.

Return value
  This method returns a `string` of HTML representing the rendered document.

Usage
  Without custom settings
    ````
    const html = Up.render(document)
    ````

  With custom settings
    ````
    const html = Up.render(document, {
      idPrefix: 'article',
      terms: {
        toggleSpoiler: 'toggle',
        toggleNsfw: 'toggle',
        toggleNsfl: 'toggle'
      }
    })
    ````


`Up.renderDocumentAndTableOfContents`
=====================================

Summary
  This method converts a syntax tree into two pieces of HTML, both of which are returned:

  1. A table of contents
  2. The document itself

Arguments
  `document`: [topic: Document]
    The syntax tree to convert into HTML.

  `renderingSettings` (optional): [topic: Up.UserProvidedSettings.Rendering]
    The custom rendering settings to apply.

Return value
  This method returns an object with two fields:

  `tableOfContentsHtml`
    The HTML for the table of contents.
  `documentHtml`
    The HTML for the document itself.

Usage
  Without custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      Up.renderDocumentAndTableOfContents(document)
    ````

  With custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      Up.renderDocumentAndTableOfContents(document, {
        idPrefix: 'article',
        terms: { tableOfContents: 'In This Article' }
      })
    ````


`Up.renderInline`
================

Summary
  This method converts an inline syntax tree into inline HTML and returns the result.

  For more information about inline documents, see [topic: Up.Inline documents].

Arguments
  `inlineDocument`: [topic: Up.InlineDocument]
    The inline synta tree to convert into HTML.

  `renderingSettings` (optional): [topic: Up.UserProvidedSettings.Rendering]
    The custom rendering settings to apply.

Return value
  This method returns a `string` of HTML representing the rendered inline document.

Usage
  Without custom settings
    ````
    const html = Up.renderInline(inlineDocument)
    ````

  With custom settings
    ````
    const html = Up.renderInline(inlineDocument, {
      idPrefix: 'byline',
      terms: {
        toggleSpoiler: 'toggle',
        toggleNsfw: 'toggle',
        toggleNsfl: 'toggle'
      }
    })
    ````


=============
Configuration
=============

All functions accept custom settings!

For a full description of Up's functions, see [topic: functions].


`UserProvidedSettings`
======================

Summary
  The `UserProvidedSettings` interface includes both parsing settings and rendering settings.

  Use this interface to provide custom settings to functions that both parse markup *and* render the result to HTML:

  - [topic: Up.parseAndRender]
  - [topic: Up.parseAndRenderDocumentAndTableOfContents]
  - [topic: Up.parseAndRenderInline]

Members (both of which are optional)
  `parsing`: [topic: Up.UserProvidedSettings.Parsing]
    The custom parsing settings to apply.

  `rendering`: [topic: Up.UserProvidedSettings.Rendering]
    The custom rendering settings to apply.

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      createSourceMap: true,
      terms: { highlight: 'mark' }
    },
    rendering: {
      idPrefix: 'article'
    }
  })
  ````


`UserProvidedSettings.Parsing`
==============================

Summary
  The `UserProvidedSettings.Parsing` interface includes all parsing settings.

  Use this interface to provide custom settings to functions that parse markup and return the resulting syntax tree:

  - [topic: Up.parse]
  - [topic: Up.parseInline]

  As part of [topic: Up.UserProvidedSettings], this interface also provides custom settings to functions that both parse markup *and* render the result to HTML:

  - [topic: Up.parseAndRender]
  - [topic: Up.parseAndRenderDocumentAndTableOfContents]
  - [topic: Up.parseAndRenderInline]

Members (all of which are optional)
  [topic: createSourceMap]: `boolean`
    Enables source mapping.

  [topic: defaultUrlScheme]: `string`
    The default URL scheme for URLs without one.

  [topic: baseForUrlsStartingWithSlash]: `string`
    The base for URLs starting with `/`.

  [topic: baseForUrlsStartingWithHashMark]: `string`
    The base for URLs starting with `#`.

  [topic: fancyEllipsis]: `string`
    Up replaces consecutive periods with this fancy ellipsis.

  `terms` (all of which are optional)

    ------------------------
    Customizing syntax terms
    ------------------------

    You can provide unlimited variations for every syntax term! Even when you provide custom term variations, Up always recognizes the defaults---they're never "overwritten".

    For a given syntax term, if you want to specify multiple custom variations, specify them using an array of strings. However, if you only need to specify a single custom variation, you can use a plain string instead.

    Example
      ````
      const document = Up.parse(markup, {
        terms: {
          audio: ["sound", "song"],
          highlight: "mark"
        }
      })
      ````

    Discussion
      In the above example, the `audio` term has two custom variations: "sound" and "song". The audio convention will recognize both of those variations, plus the default: "audio".

      The `highlight` term has a single custom variation: "mark". The highlighting convention will recognize that variation, plus the default: "highlight".

      For a full description of the various functions you can use, please see [topic: functions].

    Keep in mind that syntax terms are always case-insensitive, so you don't need to provide multiple variations if you simply want to support different capitalizations.

    `audio`: `string` or `string[]`
      Recognized by [topic: audio].

    `chart`: `string` or `string[]`
      Recognized by [topic: chart].

    `highlight`: `string` or `string[]`
      Recognized by [topic: highlight].

    `image`: `string` or `string[]`
      Recognized by [topic: image].

    `nsfl`: `string` or `string[]`
      Recognized by [topic: NSFL].

    `nsfw`: `string` or `string[]`
      Recognized by [topic: NSFW].

    `sectionLink`: `string` or `string[]`
      Recognized by [topic: sectionLink].

    `spoiler`: `string` or `string[]`
      Recognized by [topic: spoilers].

    `table`: `string` or `string[]`
      Recognized by [topic: table].

    `video`: `string` or `string[]`
      Recognized by [topic: video].

Usage
  ````
  const document = Up.parse(markup, {
    createSourceMap: true,
    terms: {
      audio: ["sound", "song"],
      highlight: "mark"
    }
  })
  ````


Parsing settings
================

-----------------
`createSourceMap`
-----------------

Summary
  When `createSourceMap` is enabled, Up keeps track of the original line number for every instance of every outline convention.

  This document uses source mapping to synchronize the scrolling between itself and its markup.

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      createSourceMap: true
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing].

Details
  `createSourceMap` works by setting the `sourceLineNumber` of each `OutlineSyntaxNode`. Source line numbers start at `1`, not `0`.

  When these syntax nodes are rendered to HTML, the HTML elements they produce each have a `data-up-source-line` attribute set the appropriate line number.

Default
  `false`


------------------
`defaultUrlScheme`
------------------

Summary
  The `defaultUrlScheme` is prefixed to any link URL or media URL without a [URL scheme] (wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax).
  
  For URLs *with* a URL scheme, this setting has no effect. Furthermore, this setting is not applied to URLs that start with `/` or `#`. For those URLs, see [topic: baseForUrlsStartingWithSlash] or [topic: baseForUrlsStartingWithHashMark].

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      defaultUrlScheme: "my-app://"
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing]. 

Default
  `"https://"`


------------------------------
`baseForUrlsStartingWithSlash`
------------------------------

Summary
  The `baseForUrlsStartingWithSlash` is prefixed to any link URL or media URL starting with `/`.
  
Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      baseForUrlsStartingWithSlash: "https://example.com/blog/"
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing]. 

Default
  `""` (an empty string)


---------------------------------
`baseForUrlsStartingWithHashMark`
---------------------------------

Summary
  The `baseForUrlsStartingWithSlash` is prefixed to any link URL or media URL starting with `#`.

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      baseForUrlsStartingWithHashMark: "https://example.com/blog/post/28"
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing].

Default
  `""` (an empty string)


---------------
`fancyEllipsis`
---------------

Summary
  Up automatically replaces consecutive periods with `fancyEllipsis`.

  By default, `fancyEllipsis` is `…`. If you you want Up to use a different fancy ellipsis (e.g. `⋯` or even `. . .`), set `fancyEllipsis` accordingly.

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      fancyEllipsis: "⋯"
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing]. 

Default
  `"…"`


`UserProvidedSettings.Rendering`
============================================

Summary
  The `UserProvidedSettings.Parsing` interface includes all rendering settings.

  Use this interface to provide custom settings to functions that render syntax trees to HTML:

  - [topic: Up.render]
  - [topic: Up.renderDocumentAndTableOfContents]
  - [topic: Up.renderInline]

  As part of [topic: Up.UserProvidedSettings], this interface also provides custom settings to functions that both parse markup *and* render the result to HTML:

  - [topic: Up.parseAndRender]
  - [topic: Up.parseAndRenderDocumentAndTableOfContents]
  - [topic: Up.parseAndRenderInline]

Members (all of which are optional)
  [topic: idPrefix]: `string`
    The prefix to apply to HTML IDs.

  [topic: Up.renderDangerousContent]: `boolean`
    Enables the rendering of dangerous content. Enabling this setting is not recommended!

  `terms` (all of which are optional)

    --------------------------
    Customizing rendered terms
    --------------------------

    You don't need to worry about escaping any characters in your custom terms! Up handles that for you.

    `footnote`: `string`
      Appears in the URLs of footnotes definitions (i.e. in their respective footnote blocks).

    `footnoteReference`: `string`
      Appears in the URLs of footnotes references (i.e. the superscripts within paragraphs).

    `sectionReferencedByTableOfContents`: `string`
      Appears in the URLs of headings referenced by the table of contents.

    `tableOfContents`: `string`
      Appears at the top of the table of contents.

    `toggleNsfl`: `string`
      Appears on the button that toggles the visibility of NSFL content.

    `toggleNsfw`: `string`
      Appears on the button that toggles the visibility of NSFW content.

    `toggleSpoiler`: `string`
      Appears on the button that toggles the visibility of spoiler content.

Usage
  ````
  const html = Up.render(document, {
    idPrefix: 'article',
    terms: {
      toggleSpoiler: 'toggle',
      toggleNsfw: 'toggle',
      toggleNsfl: 'toggle'
    }
  })
  ````


Rendering settings
==================

----------
`idPrefix`
----------

Summary
  If you are rendering multiple documents onto the same page, you need to use this setting to prevent HTML ID collisions between documents.

  By default, `idPrefix` is "up" to prevent ID collisions any HTML elements *not* rendered by Up. If you don't want any ID prefix, you can set `idPrefix` to an empty string.

Usage
  ````
  const html = Up.parseAndRender(markup, {
    rendering: {
      idPrefix: "article",
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Rendering].

Details
  You don't need to worry about escaping HTML for your `idPrefix`---Up automatically handles that for you. Furthermore, Up automatically converts any spaces in your `idPrefix` to hyphens.

Default
  `"up"`


------------------------
`renderDangerousContent`
------------------------

Summary
  Normally, Up will not render links or media elements with potentially exploitable URI schemes (`javascript`, `vbscript`, `data`, and `file`).

  When this setting is enabled, Up will dutifully render all links and media elements.

Usage
  ````
  const html = Up.parseAndRender(markup, {
    rendering: {
      renderDangerousContent: true
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Rendering].

Details
  By default, dangerous media elements produce no HTML at all. Dangerous links produce no HTML of their own, though their child elements are rendered.

Default
  `false`



================
Inline documents
================

In certain contexts, you might want to restrict a document to just a single line:

- An online chat message
- The title of a thread on a message board
- The byline for a user's profile

That's what inline documents are for! To take advantage of inline documents, use one of the following functions:

- [topic: Up.parseAndRenderInline]
- [topic: Up.parseInline]
- [topic: Up.renderInline]


Syntax differences
==================

Within inline documents, Up ignores all outline conventions. Furthermore, [topic: footnotes] and [topic: section links] aren't supported.

When Up encounters a footnote in an inline document, it pretends the author had used parentheses instead of a footnote:

Inline markup
  ````
  My dad [^ Professor Oak] is very wise.
  ````
Output
  My dad (Professor Oak) is very wise.

Within inline documents, Up doesn't recognize the syntax for section links. Consequently, their markup is instead treated as regular old text enclosed within brackets:

Inline markup
  ````
  I enjoyed our conversation [topic: the weather].
  ````
Output
  I enjoyed our conversation [\topic: the weather].


Rendered HTML
=============

When inline documents are rendered, the resulting HTML is not enclosed within any container element.

Inline markup:
  I *really* like Starcraft.

Rendered inline HTML:
  ````
  I <em>really</em> like Starcraft.
  ````


================
`Up.Transformer`
================

Purpose
  The `Up.Transformer` class can be useful if you need to parse or render several documents all sharing custom settings.

  Those shared settings can be provided just once---in the constructor. Then, when calling methods on your object, you only need to provide settings that overwrite (or supplement) the ones you provided to the constructor.

  ````
  const Up = require('write-up')

  const up = new Up.Transformer(settings)
  const html = up.parseAndRender(markup, settingsChanges)

Constructor arguments
  `settings` (optional): [topic: Up.UserProvidedSettings]
    The custom parsing and/or rendering settings to apply for all subsequent method calls.

Members
  This class's methods have the same names and aruments as the functions in the Up library:

  - [topic: Up.parseAndRender]
  - [topic: Up.parseAndRenderDocumentAndTableOfContents]
  - [topic: Up.parseAndRenderInline]
  - [topic: Up.parse]
  - [topic: Up.parseInline]
  - [topic: Up.render]
  - [topic: Up.renderDocumentAndTableOfContents]
  - [topic: Up.renderInline]

  The only difference: When a method is invoked with custom settings, those settings are merged with the settings provided to the constructor. If any individual settings conflict, Up uses the conflicting values provided to the method.

  Here's an example of merging settings:

  ````
  const up = new Up.Transformer({
    parsing: {
      createSourceMap: true,
      fancyEllipsis: "⋯",
      terms: {
        audio: ["sound", "song"],
        highlight: "mark"
      }
    },
    rendering: {
      terms: { tableOfContents: "Contents" }
    }
  })
  
  const html = up.parseAndRender(markup, {
    parsing: {
      createSourceMap: false,
      terms: {
        audio: "listen",
      }
    },
    rendering: {
      idPrefix: "article"
    }
  })
  ````

  In the above example, the following settings are ultimately applied:

  ````
  {
    parsing: {
      createSourceMap: false,
      fancyEllipsis: "⋯",
      terms: {
        audio: "listen"
        highlight: "mark"
      }
    },
    rendering: {
      idPrefix: "article",
      terms: { tableOfContents: "Contents" }
    }
  }
  ````
  

===================
Syntax node classes
===================

Unless you're fiddling with the syntax tree, you don't need to worry about any of the syntax node classes.


`Up.Document`
=============

Purpose
  This class represents the syntax tree for a parsed document.

Extends
  [topic: UP.OutlineSyntaxNodeContainer]

Unique members
  `tableOfContents`: [topic: Document.TableOfContents]
    An object representing the document's table of contents.

  `create` method (`static`)
    Purpose
      This method produces and returns a ready-to-render syntax tree from a collection of outline syntax nodes.

    Arguments
      `children`: array of [topic: OutlineSyntaxNode]
        A collection of outline syntax nodes representing the top-level conventions in the document.

    Return value
      This method returns a ready-to-render `Document` object.
      
      To prepare the document for rendering, this method: 
  
      - Assigns footnotes their reference numbers
      - Extracts footnotes into footnote blocks 
      - Produces a table of contents
      - Associates section links with the apprioriate table of contents entries


`Up.Document.TableOfContents`
=============================

Purpose
  This class represents the table of contents for a document. The table of contents includes every heading except those found within [topic: revealable content].

Members
  `entries`: array of [topic: TableOfContents.Entry]
    A collection of entries representing headings in the document.


`Up.Document.TableOfContents.Entry`
===================================

Purpose
  This interface represents an entry in the table of contents.

Members
  `ordinal`: `number`
    Represents the entry's ordinal in the table of contents. The first ordinal is `1`, not `0`.

  `level`: `number`
    Represents the heading level of the entry.

  `searchableText()` method: string
    Represents the searchable text of the syntax node. In contrast to `textAppearingInline`, footnotes and images should have searchable text (footnotes have content, and images have a description).
    
    This is used to help [topic: section links] match the most appropriate table of content entry.

  `representationOfContentWithinTableOfContents()`: array of [topic: Up.InlineSyntaxNode]
    Within the table of contents, the inline syntax nodes that represent this entry's contents.

  `inlineDescendants()`: array of [topic: Up.InlineSyntaxNode]
    The inline descendents (children, grandchildren, etc.) of the syntax node represented by this table of contents entry.
  

`Up.InlineDocument`
==================

Purpose
  This class represents the syntax tree for a parsed inline document.

Extends
  [topic: Up.InlineSyntaxNodeContainer]  


`Up.InlineSyntaxNode`
=====================

Purpose
  Inline syntax node classes must implement this interface. 
  
Members
  `textAppearingInline()` method: string
    Represents the text of the syntax node as it should appear inline. Some inline conventions don't have any, including [topic: footnotes] and [topic: images].

    This method is used to help determine whether cells in [topic: tables] and [topic: charts] are numeric.

  `searchableText()` method: string
    Represents the searchable text of the syntax node. In contrast to `textAppearingInline`, footnotes and images should have searchable text (footnotes have content, and images have a description).
    
    This method is used to help [topic: section links] match the most appropriate table of content entry.


`Up.OutlineSyntaxNode`
======================

Purpose
  Outline syntax node classes must implement this interface.
  
Members
  `sourceLineNumber`: `number`
    The first line of markup that produced this syntax node. Source line numbers start at `1`, not `0`.

  `descendantsToIncludeInTableOfContents()`: array of [topic: Up.Document.TableOfContents.Entry]
    Any descendants (at any nesting level) to include in the table of contents.


`Up.RichInlineSyntaxNode`
=========================

Purpose
  This abstract class represents an inline syntax node that can contain other inline syntax nodes.

Extends
  [topic: Up.InlineSyntaxNodeContainer]

Implements
  [topic: Up.InlineSyntaxNode]


`Up.RichOutlineSyntaxNode`
=========================

Purpose
  This abstract class represents an outline syntax node that can contain other outline syntax nodes.

Extends
  [topic: Up.OutlineSyntaxNodeContainer]

Implements
  [topic: Up.OutlineSyntaxNode]


`Up.InlineSyntaxNodeContainer`
==============================

Purpose
  This abstract class represents a container of inline syntax nodes.
  
Members
  `children`: array of [topic: Up.InlineSyntaxNode]
    A collection of inline syntax nodes representing the top-level content of the container.

  `inlineDescendants()`: array of [topic: Up.InlineSyntaxNode]
    All inline descendants (including `children`, grandchildren, etc.)


`Up.OutlineSyntaxNodeContainer`
==============================

Purpose
  This abstract class represents a container of inline syntax nodes.
  
Members
  `children`: array of [topic: Up.InlineSyntaxNode]
    A collection of outline syntax nodes representing the top-level content of the container.

  `descendantsToIncludeInTableOfContents()`: array of [topic: Document.TableOfContents.Entry]
    Any descendants (children, grandchildren, etc.) to include in the table of contents.

  `inlineDescendants()`: array of [topic: Up.InlineSyntaxNode]
    All inline descendants of `children`. 


`Up.MediaSyntaxNode`
====================

Purpose
  This abstract class represents a media convention.

Implements
  [topic: Up.InlineSyntaxNode]
    Media conventions can appear inline.
  [topic: Up.OutlineSyntaxNode]
    If a line consists solely of media conventions (or media conventions within links), those media conventions are placed directly into the outline.

Unique members
  `description`: `string`
    The media's description.

  `url`: `string`
    Represents this media convention's URL after the following settings are applied:

    - [topic: defaultUrlScheme]
    - [topic: baseForUrlsStartingWithSlash]
    - [topic: baseForUrlsStartingWithHashmark]


`Up.RevealableInlineSyntaxNode`
===============================

Purpose
  This abstract class represents an inline revealable convention. It exists solely to improve the strictness of the type system.

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.RevealableOutlineSyntaxNode`
===============================

Purpose
  This abstract class represents an revealable outline convention.
  
  Headings within revealable outline conventions are not included in the table of contents.

Extends
  [topic: Up.RichOutlineSyntaxNode]



`Up.Audio`
==========

Convention
  [topic: Audio]

Extends
  [topic: Up.MediaSyntaxNode]


`Up.Bold`
=========

Convention
  [topic: Audio]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.Blockquote`
===============

Convention
  [topic: Blockquote]

Extends
  [topic: Up.RichOutlineSyntaxNode]


`Up.CodeBlock`
==============

Convention
  [topic: Code blocks]

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `code`: `string`
    The content of the code block.


`Up.DescriptionList`
====================

Convention
  [topic: Description lists]

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `items`: array of [topic: Up.DescriptionList.Item]
    The collection of items comprising the description list.


`Up.DescriptionList.Item`
=========================

Purpose
  Represents a collection of subjects and their corresponding description.

Unique members
  `subjects`: array of [topic: Up.DescriptionList.Item.Subject]
    The set of subjects described by `description`
  
  `description`: array of [topic: DescriptionList.Item.Description]
    A description of `subjects`


`Up.DescriptionList.Item.Subject`
=================================

Purpose
  Represents the set of subjects described by a given description within a description list item.

Extends
  [topic: Up.InlineSyntaxNodeContainer]


`Up.DescriptionList.Item.Description`
=====================================

Purpose
  Represents the description of a given set of subjects within a description list item.

Extends
  [topic: Up.InlineSyntaxNodeContainer]


`Up.Emphasis`
=============

Convention
  [topic: Emphasis]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.ExampleInput`
=============

Convention
  [topic: Example input]

Implements
  [topic: Up.InlineSyntaxNode]

Unique members
  `input`: `string`
    The example of user input.


`Up.FootnoteBlock`
==================

Purpose
  Footnotes are written inline, but they aren't meant to appear inline in the final document. That would defeat the purpose of footnotes! Instead, footnotes are extracted and placed in footnote blocks. This syntax node represents those blocks.

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `footnotes`: array of [topic: Up.Footnote]
    The collection of footnotes comprising the footnote block.


`Up.Footnote`
=============

Convention
  [topic: Footnotes]

Extends
  [topic: Up.RichInlineSyntaxNode]

Unique members
  `referenceNumber`: `number`
    The number that appears in superscript. 


`Up.Heading`
=============

Convention
  [topic: Headings]

Extends
  [topic: Up.InlineSyntaxNodeContainer]

Implements
  [topic: Up.OutlineSyntaxNode]
    Headings are outline syntax nodes.
  
  [topic: Up.Document.TableOfContents.Entry]
    Headings can also be in the table of contents!

Unique members
  `level`: `number`
    Represents the significance of the heading. Like HTML heading levels, a `level` of `1` is considered the most significant.


`Up.Highlight`
==============

Convention
  [topic: Highlighting]

Extends
  [topic: Up.RichInlineSyntaxNode]
  

`Up.Image`
==========

Convention
  [topic: Images]

Extends
  [topic: Up.MediaSyntaxNode]


`Up.InlineCode`
===============

Convention
  [topic: Inline code]

Implements
  [topic: Up.InlineSyntaxNode]

Unique members
  `code`: `string`
    The content of the inline code.


`Up.InlineNsfl`
==============

Convention
  [topic: Inline NSFL]

Extends
  [topic: Up.RevealableInlineSyntaxNode]


`Up.InlineNsfw`
==============

Convention
  [topic: Inline NSFW]

Extends
  [topic: Up.RevealableInlineSyntaxNode]


`Up.InlineSpoiler`
==================

Convention
  [topic: Inline spoilers]

Extends
  [topic: Up.RevealableInlineSyntaxNode]


`Up.InlineQuote`
==============

Convention
  [topic: Inline quotes]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.Italic`
==============

Convention
  [topic: Italics]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.LineBlock`
====================

Convention
  [topic: Line blocks]

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `lines`: array of [topic: Up.LineBlock.Line]
    The collection of lines comprising the line block.


`Up.LineBlock.Line`
===================

Purpose
  Represents a line in a line block.

Extends
  [topic: Up.InlineSyntaxNodeContainer]


`Up.Link`
=========

Convention
  [topic: Italics]

Extends
  [topic: Up.RichInlineSyntaxNode]

Implements
  [topic: Up.OutlineSyntaxNode]
    If a line consists solely of media conventions *or media conventions within links*, those media conventions are placed directly into the outline.

Unique members
  `url`: `string`
    Represents this links's URL after the following settings are applied:

    - [topic: defaultUrlScheme]
    - [topic: baseForUrlsStartingWithSlash]
    - [topic: baseForUrlsStartingWithHashmark]


`Up.NsflBlock`
==============

Convention
  [topic: NSFL blocks]

Extends
  [topic: Up.RevealableOutlineSyntaxNode]


`Up.NsfwBlock`
==============

Convention
  [topic: NSFW blocks]

Extends
  [topic: Up.RevealableOutlineSyntaxNode]


`Up.Video`
==========

Convention
  [topic: Video]

Extends
  [topic: Up.MediaSyntaxNode]
