##########
What's Up?
##########

Up is a markup language for writing structured documents in plain text.

For software developers, Up offers a software library that converts Up markup into HTML. To learn more, please see [topic: using the Up library].



===========
Why use Up?
===========

Up isn't the only markup language that produces HTML. What makes it special?


Up uses customizable keywords
=============================

Too many markup languages devolve into a dense soup of symbols and punctuation.

When a keyword would provide more clarity than a symbol, Up takes advantage of that! Several writing conventions, including [topic: tables] and [topic: revealable content], incorporate keywords.

If you're a software developer using the Up library, you can provide multiple custom variations for each keyword. To learn more, please see [topic: customizing keywords].


Up has a flexible, forgiving syntax
===================================

Up recognizes [topic: numbered lists] that count backwards.

Markup
  ````
  3) Buy milk
  2) Buy bread
  #) Buy happiness
  ````

Output
  3) Buy milk
  2) Buy bread
  #) Buy happiness

Up usually ignores [topic: excessive delimiter characters].

For example, you don't need to perfectly balance asterisks when stressing or emphasizing text.

Markup
  ````
  I ***love****** asterisks!
  ````

Output
  I ***love****** asterisks!

Up isn't picky about which brackets you use for [topic: links].

Markup
  ````
  - Buy [milk] (en.wikipedia.org/wiki/Milk)
  - Buy (bread) [en.wikipedia.org/wiki/Bread]
  - Buy [sugar] [en.wikipedia.org/wiki/Sugar]
  - Buy (happiness) (en.wikipedia.org/wiki/Happiness)
  ````

Output
  - Buy [milk] (en.wikipedia.org/wiki/Milk)
  - Buy (bread) [en.wikipedia.org/wiki/Bread]
  - Buy [sugar] [en.wikipedia.org/wiki/Sugar]
  - Buy (happiness) (en.wikipedia.org/wiki/Happiness)

Up even supports [topic: overlapping]!

Markup
  ````
  John **enjoys ==sleeping** late== whenever he can.
  ````

Output
  John **enjoys ==sleeping** late== whenever he can.


Up produces fully accessible HTML
=================================

From the table of contents to the last movie-ruining spoiler, Up produces fully accessible HTML. This means people who have trouble viewing a screen or a using mouse can enjoy every document.



=================
Why *not* use Up?
=================

You want a rich ecosystem of tools
==================================

So far, there is only one [software library for Up] (npmjs.com/package/up-lang), written and maintained by a [single person] (github.com/start). In contrast, [other markup languages] (duckduckgo.com/?q=markdown) have countless tools and plugins.


You need speed
==============

Up is not terribly slow, but it's not terribly fast, either---at least not yet! If you need instant, real-time parsing and rendering of large documents, Up isn't the best markup language for you.



###################
Writing conventions
###################

Don't get lost! The following terms are occasionally used throughout this section.

Writing convention
  Any special annotation or formatting recognized by Up.

Inline writing convention
  Any writing convention that can be used within paragraphs. This includes [topic: emphasis] and [topic: highlighting].

Outline writing convention
  Any non-inline writing convention. This includes [topic: paragraphs] and [topic: tables].


==========
Paragraphs
==========

Paragraphs are the simplest writing convention in Up.

Markup
  ````
  Unlike regular dental floss, you can use floss picks even if you're not a trained dental hygienist.

  Floss picks are sold in stylish, resealable plastic bags. You have no excuse not to buy some today.
  ````

Output
  Unlike regular dental floss, you can use floss picks even if you're not a trained dental hygienist.

  Floss picks are sold in stylish, resealable plastic bags. You have no excuse not to buy some today.

To produce a paragraph, write a line of text. That's all there is to it!

Typically, paragraphs are separated by one or two blank lines. Three or more blank lines between paragraphs indicates a meaningful change of subject. To learn more, see [topic: thematic breaks].

In contrast, *consecutive* non-blank lines produce [topic: line blocks], not consecutive paragraphs.


===========
Line blocks
===========

Use the line block convention for addresses, lyrics, or anything consisting of *lines* instead of actual [topic: paragraphs].

Markup
  ````
  Have you read my new poem?

  Roses are red
  Violets *aren't* blue
  Lyrics have lines
  And addresses do, too

  Poetry is just too easy.
  ````

Output
  Have you read my new poem?

  Roses are red
  Violets *aren't* blue
  Lyrics have lines
  And addresses do, too

  Poetry is just too easy.

Consecutive non-blank lines produce a line block, unless those lines represent another writing convention, like [topic: numbered lists].


========
Emphasis
========

Use the emphasis convention to emphasize a word or phrase.

If the reader should pronounce a word or phrase differently (e.g. to indicate contrast or sarcasm), consider emphasizing it.

Markup
  ````
  Only eat the *green* grapes. The red grapes are for Pikachu.
  ````

Output
  Only eat the *green* grapes. The red grapes are for Pikachu.

To emphasize text, enclose it within single asterisks.

Like most inline writing conventions, emphasis can be nested within itself.

Markup
  ````
  John really, *really, *really** hates Red Delicious apples.
  ````

Output
  John really, *really, *really** hates Red Delicious apples.


======
Stress
======

Use the stress convention to indicate a word or phrase is particularly important.

If the reader should raise their voice while reading a word or phrase, consider stressing it.

Markup
  ````
  Do **not** step on the dinosaur!
  ````

Output
  Do **not** step on the dinosaur!

To stress text, enclose it within double asterisks.

Like most inline writing conventions, stress can be nested within itself.

Markup
  ````
  John really, **really, **really**** hates Red Delicious apples.
  ````

Output
  John really, **really, **really**** hates Red Delicious apples.


=======
Italics
=======

Use the italic convention to stylistically offset a word or phrase from the surrounding text *without* conveying emphasis. The titles of books and movies should probably be italicized.

Markup
  ````
  My favorite video game is _Chrono Cross_.
  ````

Output
  My favorite video game is _Chrono Cross_.

To italicize text, enclose it within single underscores.

Like most inline writing conventions, italicized text can be nested within itself.

Markup
  ````
  My favorite show is _Real Recipes _Redux_: Super Suppers_.
  ````

Output
  My favorite show is _Real Recipes _Redux_: Super Suppers_.


====
Bold
====

If you want to make a word or phrase bold without conveying any extra importance, use the bold convention.

This convention should rarely be used. Usually, there's a more appropriate convention!

If you want to highlight text, see [topic: highlighting]. If you want to indicate the importance of a word of phrase, see [topic: stress].

Markup
  ````
  Has anyone actually used __KABOOM__ cleaning products?
  ````

Output
  Has anyone actually used  __KABOOM__ cleaning products?

To make text bold, enclose it within double underscores.

Like most inline writing conventions, bold text can be nested within itself.

Markup
  ````
  We've all seen the ads.

  __No hard scrubbing! __KABOOM__... and the stains are gone!__
  ````

Output
  We've all seen the ads.

  __No hard scrubbing! __KABOOM__... and the stains are gone!__


=====
Links
=====

You already know what a link is!

Markup
  ````
  The [Game Boy] (en.wikipedia.org/wiki/Game_Boy) was my first video game system.
  ````

Output
  The [Game Boy] (en.wikipedia.org/wiki/Game_Boy) was my first video game system.

A link consists of two parts: content and a URL.

To produce a link, simply enclose its content in square brackets or parentheses, then enclose its URL in square brackets or parentheses.

You can use mix and match either type of bracket---they're totally interchangeable.

Markup
  ````
  - Buy [milk] (en.wikipedia.org/wiki/Milk)
  - Buy (bread) [en.wikipedia.org/wiki/Bread]
  - Buy [sugar] [en.wikipedia.org/wiki/Sugar]
  - Buy (happiness) (en.wikipedia.org/wiki/Happiness)
  ````

Output
  - Buy [milk] (en.wikipedia.org/wiki/Milk)
  - Buy (bread) [en.wikipedia.org/wiki/Bread]
  - Buy [sugar] [en.wikipedia.org/wiki/Sugar]
  - Buy (happiness) (en.wikipedia.org/wiki/Happiness)

As demonstrated above, you can omit a link's URL scheme. [^ `http://` and `https://` are examples of URL schemes.] If you do, Up uses `https://` for the URL scheme.

If you're a software developer using the Up library, you can specify a different default URL scheme. To learn more, see [topic: `defaultUrlScheme`].

Other settings affecting links are:

- [topic: `baseForUrlsStartingWithSlash`]
- [topic: `baseForUrlsStartingWithHashmark`]
- [topic: `renderDangerousContent`].


Links with URLs containing spaces
=================================

If your link URL contains spaces, Up assumes you aren't *actually* trying to produce a link. So it avoids producing one!

Markup
  ````
  Warlocked is the best game for GameBoy [sic] (other than Pokémon).
  ````

Output
  Warlocked is the best game for GameBoy [sic] (other than Pokémon).

If your link URL really does contain spaces, you can make it clear that you intend to produce a link by omitting the space between your link's content and its URL.

Markup
  ````
  I love the [music](duckduckgo.com/?q=chrono cross music) for Chrono Cross.
  ````

Output
  I love the [music](duckduckgo.com/?q=chrono cross music) for Chrono Cross.

When you omit the space between your link's content and its URL, Up always produces a link.

These rules also apply when [topic: linkifying].


Bare URLs
=========

Alternatively, if you include a bare URL in your document, Up will automatically produce a link for you.

Markup
  ````
  https://en.wikipedia.org/wiki/John_Carmack
  ````

Output
  https://en.wikipedia.org/wiki/John_Carmack
 

============
Highlighting
============

To draw attention to text without altering its semantics, using the highlighting convention.

Highlighting should not be used to emphasize or stress text! If that's your purpose, see [topic: emphasis] or [topic: stress].

Markup
  ````
  Our cupcakes are organic, ==gluten-free==, and made using only the most expensive ingredients.
  ````

Output
  Our cupcakes are organic, ==gluten-free==, and made using only the most expensive ingredients.

To highlight text, enclose it within two or more equal signs.

Like most inline writing conventions, highlighting can be nested within itself.

Markup
  ````
  Our cupcakes are ==organic, ==gluten-free==, vegan==, and made using only the most expensive ingredients.
  ````

Output
  Our cupcakes are ==organic, ==gluten-free==, vegan==, and made using only the most expensive ingredients.


=============
Inline quotes
=============

Up automatically recognizes quoted text.

If you want to quote more a few sentences, considering using [topic: blockquotes].

Markup
  ````
  "Only eat the green grapes," John said.
  ````

Output
  "Only eat the green grapes," John said.

You already know how to use quotation marks! Just keep doing what you're doing.

Like most inline writing conventions, inline quotes can be nested within themselves.

Markup
  ````
  Bob replied, "Yesterday, Harvey yelled "I'll take the case!", but I doubt he will."
  ````

Output
  Bob replied, "Yesterday, Harvey yelled "I'll take the case!", but I doubt he will."


==================
Parenthetical text
==================

Up automatically recognizes parenthetical text.

Markup
  ````
  When I was ten years old, I left my home (in Pallet Town) to search for Pokémon.
  ````

Output
  When I was ten years old, I left my home (in Pallet Town) to search for Pokémon.

Up understands that text enclosed within parentheses or square brackets represents supplemental, de-emphasized content.


==================
Example user input
==================

Use the example user input convention to represent user input, including:

- Keys the user should press
- Buttons the user should click
- Menu items the user should access

Markup
  ````
    Press {esc} to quit.
  ````

Output
  Press {esc} to quit.

To indicate that text represents user input, enclose the text within curly brackets.

Up ignores any spaces separating the curly brackets from the content they enclose.

Markup
  ````
  Press { Start Game } when you are ready.
  ````
Output
  Press { Start Game } when you are ready.

Within example user input, most writing conventions are ignored. However, [topic: typographical writing conventions] are supported.


===========
Inline code
===========

Use the inline code convention to represent a small fragment of computer code.

When you need to represent more than a small fragment of computer code, use [topic: code blocks] instead.

Markup
  ````
  In HTML, you probably shouldn't use the `<font>` element.
  ````

Output
  In HTML, you probably shouldn't use the `<font>` element.

To produce inline code, enclose text within an equal number of backticks on either side. You can use any number of backticks---simply make sure both sides match.

Markup
  ````
  In HTML, you probably shouldn't use the ``<font>`` element.
  ````

Output
  In HTML, you probably shouldn't use the ``<font>`` element.

Within inline code, other writing conventions are ignored. Characters that normally have special meaning are preserved as plain text.

Markup
  ````
  In Up, surround text with `*asterisks*` to emphasize it.
  ````

Output
  In Up, surround text with `*asterisks*` to emphasize it.


Including backticks in your code
================================

To include backticks within inline code, you can precede each backtick with a backslash.

Markup
  ````
  `let output = \`score:\` + 5`
  ````

Output
  `let output = \`score:\` + 5`

For more information about the behavior of backslashes, see [topic: disabling].

Alternatively, inline code can contain streaks of backticks that aren't exactly as long as the inline code's outer delimiters. No backslashes are necessary.

In this example, the delimiters are **1** backtick long, so the inline code can contain streaks of **2** backticks:

Markup
  ````
  `let output = ``score:`` + 5`
  ````

Output
  `let output = ``score:`` + 5`

In this example, the delimiters are **2** backticks long, so the inline code can contain "streaks" of **1** backtick:

Markup
  ````
  ``let output = `score:` + 5``
  ````

Output
  ``let output = `score:` + 5``

--------------------------------------
Code starting or ending with backticks
--------------------------------------

If your inline code starts or ends with backticks, place a single space between the offending backticks and the outer delimiter. This single space is trimmed away.

In this example, the inline code both starts and ends with a backtick:

Markup
  ````
  `` `inline_code` ``
  ````

Output
  `` `inline_code` ``

Any spaces beyond that single space are preserved---if there are multiple spaces between the delimiter and the starting/ending backticks, only one space is trimmed away.

Markup
  ````
  ``    `inline_code`    ``
  ````

Output
  ``    `inline_code`    ``

Furthermore, that single space is only trimmed away when it's necessary to separate a delimiter from backticks in your inline code. If a given "side" of inline code has any non-space characters between the delimiter and the outermost backtick, no spaces are trimmed from that side.

Markup
  ````
  `` (`inline_code`) ``
  ````

Output
  `` (`inline_code`) ``


========
Headings
========

Use headings to introduce a new section in the document.

Markup
  ````
  Example heading
  ===============
  ````

Output
  Example heading
  ===============

If text is underlined, it's treated as a heading. The underline can consist of any combination of the following characters (you can mix and match):

- Hyphens: `-`
- Number signs: `#`
- Equal signs: `=`
- Plus signs: `+`
- Tildes: `~`
- Colons: `:`
- Asterisks: `*`
- At signs: `@`

A heading's underline must be at least three characters long, but it does *not* need to be the same length as the text of the heading.

Markup
  ````
  Example heading with a short underline
  ===
  ````

Output
  Example heading with a short underline
  ===


Heading levels
==============

The first heading in a document is always a top-level heading. All subsequent headings with underlines consisting of the same characters are considered top-level.

The first heading with a different combination of underline characters is considered a second-level heading. Unsurprisingly, all subsequent headings with underlines consisting of the same characters are also considered second-level.

This process continues _ad infinitum_. Every new combination of heading underline characters introduces a new heading level. There is no limit to the number of heading levels in a document.


Headings with "overlines"
=========================

A heading can have an optional "overline", but its overline must consist of the same combination of characters as its underline.

Markup
  ````
  --------------------------------
  Example heading with an overline
  --------------------------------
  ````

Output
  --------------------------------
  Example heading with an overline
  --------------------------------

For the purpose of determining heading levels, a heading with an overline is always considered distinct from a heading without one, even if both headings use the same combination of underline characters.

Therefore, a heading with an overline will never have the same level as a heading without an overline.


=============
Section links
=============

Use the section link convention to link to another section (heading) in your document.

Markup
  ````
  Up even supports [topic: overlapping]!
  ````

Output
  Up even supports [topic: overlapping]!

To link to a heading, choose a unique snippet of markup from that heading's content line. [^ Don't worry about the heading's underline or overline! Section links ignore both.] Enclose that market snippet within square brackets or parentheses, then insert `topic:` or `section:` directly inside your opening bracket.

Up automatically matches your snippet to the most appropriate heading, then produces a link for you.


Matching the most appropriate heading
=====================================

Initially, Up tries to match your section link to the first heading whose content line's markup *exactly matches* your snippet. [^ Up totally ignores the capitalization of section links' markup snippets, so a section link and a heading can be an "exact match" without being capitalized the same way.] If there isn't an exact match, Up matches your section link to the first heading whose content line markup *contains* your snippet.


=========
Footnotes
=========

Use the footnote convention for asides or citations---anything you want to say without breaking the flow of a paragraph.

Footnotes are automatically extracted into blocks for you.

Markup
  ````
  Warlocked [^ No relation to Warcraft!] is a real-time strategy game.
  ````

Output
  Warlocked [^ No relation to Warcraft!] is a real-time strategy game.

To produce a footnote, enclose its content within parentheses or square brackets. Then, insert a caret `^` directly after your opening bracket.


=====
Media
=====

Up allows you to embed [topic: images], [topic: video], or [topic: audio] in your document.


Images
======

Markup
  ````
  [image: Super Mario Land box art] (i.imgur.com/TxlFlkX.jpg)
  ````

Output
  [image: Super Mario Land box art] (i.imgur.com/TxlFlkX.jpg)

If you want to link your image to another page, please see [topic: linkifying].


Video
=====

Markup
  ````
  [video: Professor Leonard] (i.imgur.com/32fBpnh.mp4)
  ````

Output
  [video: Professor Leonard] (i.imgur.com/32fBpnh.mp4)


Audio
=====

Markup
  ````
  [audio: Sadness theme from Infinity for Game Boy] (a.clyp.it/ybct5hcl.mp3)
  ````

Output
  [audio: Sadness theme from Infinity for Game Boy] (a.clyp.it/ybct5hcl.mp3)


Syntax
======

To embed media in your document, simply enclose its description in square brackets or parentheses, then enclose its URL in square brackets or parentheses.

You can use mix and match either type of bracket---they're totally interchangeable.

------------------
Media descriptions
------------------

Media descriptions always start with `image:`, `audio:`, or `video:`, depending on the type of media you wish to include.

Within media descriptions, most writing conventions are ignored. However, [topic: typographical writing conventions] are supported.

----------
Media URLs
----------

As demonstrated above, you can omit the URL scheme for media URLs. If you do, Up uses `https://` for the URL scheme.

If you're a software developer using the Up library, you can specify a different default URL scheme. To learn more, see [topic: `defaultUrlScheme`].

Other settings affecting media are:

- [topic: `baseForUrlsStartingWithSlash`]
- [topic: `baseForUrlsStartingWithHashmark`]
- [topic: `renderDangerousContent`].


==================
Revealable content
==================

Both [topic: inline revealables] and [topic: revealable blocks] recognize any of the following keywords:

- `spoiler`
- `nsfw`
- `nsfl`
- `revealable`

Like all keywords in Up, you can capitalize them however you want.


Inline revealables
==================

Use the inline revealable convention to hide content within a paragraph.

When you want to hide more than a sentence or two, use [topic: revealable blocks] instead.

Markup
  ````
  At the end of Pokémon Red, [SPOILER: you battle your rival] before the credits roll.
  ````

Output
  At the end of Pokémon Red, [SPOILER: you battle your rival] before the credits roll.

To hide content within a paragraph, first enclose that content within square brackets or parentheses.

Then, directly inside your opening bracket, insert one of the revealable keywords followed by a colon: `spoiler:`, `nsfw:`, `nsfl:`, or `revealable:`.

Inline revealables can contain any inline writing convention.


Revealable blocks
==================

Use revealable block convention to hide a block of content.

When you want to hide content within a paragraph, use [topic: inline revealables] instead.

Markup
  ````
  SPOILER:
    After defeating the Elite Four at the end of Pokémon Red, you still have to battle your rival one last time.

    Your rival's specific lineup depends on the Pokémon you selected at the beginning of the game. However, his first three Pokémon are always the same:

    1. Pidgeot
    2. Alakazam
    3. Rhydon
  ````

Output
  SPOILER:
    After defeating the Elite Four at the end of Pokémon Red, you still have to battle your rival one last time.

    Your rival's specific lineup depends on the Pokémon you selected at the beginning of the game. However, his first three Pokémon are always the same:

    1. Pidgeot
    2. Alakazam
    3. Rhydon

To hide a block of content, first indent it two spaces (or a tab).

Then, on the line *before* your indented block, put one of the revealable keywords: `spoiler`, `nsfw`, `nsfl`, or `revealable`.

In the example above, the chosen revealable keyword (`spoiler`) is followed by a colon. The colon is optional.


===========
Blockquotes
===========

Use the blockquote convention to quote a large section of text.

For typical dialog, you should probably use [topic: inline quotes] instead.

Markup
  ````
  > I hate oranges for the following reasons:
  >
  > 1. They're not apples.
  > 2. They're not bananas.
  ````

Output
  > I hate oranges for the following reasons:
  >
  > 1. They're not apples.
  > 2. They're not bananas.

A blockquote consists of consecutive lines starting with `> ` (a greater-than symbol followed by a space).

Blockquotes can contain any outline writing convention, including other blockquotes.

Markup
  ````
  > Thank you for replying to my blog!
  >
  > > I hate oranges for the following reasons:
  > >
  > > 1. They're not apples.
  > > 2. They're not bananas.
  >
  > I completely understand.
  ````

Output
  > Thank you for replying to my blog!
  >
  > > I hate oranges for the following reasons:
  > >
  > > 1. They're not apples.
  > > 2. They're not bananas.
  >
  > I completely understand.


===============
Thematic breaks
===============

Use the thematic break convention to represent a change of subject.

A thematic break can be represented by 3 or more consecutive blank lines.

Markup
  ````
  I vowed never to eat apples again.



  By mid-March, a second flock of birds had moved into my dining room.
  ````

Output
  I vowed never to eat apples again.



  By mid-March, a second flock of birds had moved into my dining room.

A thematic break can *also* be represented by a line consisting of 3 or more of the following characters:

- Hyphens: `-`
- Number signs: `#`
- Equal signs: `=`
- Plus signs: `+`
- Tildes: `~`
- Colons: `:`
- Asterisks: `*`
- At signs: `@`

You can use any combination of those characters!

Markup
  ````
  I vowed never to eat apples again.

  #=*=*=*=*=*=*=*=*=*=#

  By mid-March, a second flock of birds had moved into my dining room.
  ````

Output
  I vowed never to eat apples again.

  #=*=*=*=*=*=*=*=*=*=#

  By mid-March, a second flock of birds had moved into my dining room.


==============
Bulleted lists
==============

You already know what a bulleted list is!

Markup
  ````
  - Buy milk
  - Buy bread
  - Buy happiness
  ````

Output
  - Buy milk
  - Buy bread
  - Buy happiness


Bullets
=======

Every bulleted list item starts with a bullet followed by a space. The following characters can serve as a bullet:

- A hyphen: `-`
- An asterisk: `*`
- An actual bullet character: `•`


Spacing between list items
==========================

Each list item can be followed by a single blank line. This has no impact on the list itself.

Markup
  ````
  - Buy milk

  - Buy bread

  - Buy happiness
  ````

Output
  - Buy milk

  - Buy bread

  - Buy happiness

On the other hand, if a list item is followed by 2 blank lines, it marks the end of the list.

Markup
  ````
  - Buy milk
  - Buy bread


  - Fix squeaky cabinet
  - Fix self-esteem
  ````

Output
  - Buy milk
  - Buy bread


  - Fix squeaky cabinet
  - Fix self-esteem


List items consisting of multiple lines
=======================================

List items aren't limited to a single line!  Bulleted lists can contain any outline writing convention, including other bulleted lists.

If your list item contains more than one line, subsequent lines should be indented 2 spaces (or a tab).

Markup
  ````
  - Buy milk.

    If whole milk is on sale, buy that. Otherwise, buy 2%.

  - Buy bread.

    Only buy bread from one of the following brands:

    * Little Northern Bakehouse
    * Udi's
    * Canyon Bakehouse

  - Buy happiness.

    Don't spend more than a few cents on this.
  ````

Output
  - Buy milk.

    If whole milk is on sale, buy that. Otherwise, buy 2%.

  - Buy bread.

    Only buy bread from one of the following brands:

    * Little Northern Bakehouse
    * Udi's
    * Canyon Bakehouse

  - Buy happiness.

    Don't spend more than a few cents on this. Not worth it.


==============
Numbered lists
==============

You already know what a numbered list is!

Markup
  ````
  1. Buy milk
  2. Buy bread
  3. Buy happiness
  ````

Output
  1. Buy milk
  2. Buy bread
  3. Buy happiness

Numbered lists are nearly identical to [topic: bulleted lists]---the only difference is that numbered list items have ordinals, not bullets.

The ordinal for a numbered list item can be expressed several ways:

- An integer followed by a period: `1.`
- An integer followed by a closing parenthesis: `1)`
- A number sign: `#`
- A number sign followed by a period: `#.`
- A number sign followed by a closing parenthesis: `#)`

Like each bullet in a bulleted list, each ordinal in a numbered list must be followed by a space.


Lists starting at a specific number
===================================

Numbered lists don't have to start at `1`.

Markup
  ````
  3) March
  #) April
  #) May
  ````

Output
  3) March
  #) April
  #) May


Lists in descending order
=========================

Up automatically recognizes when a numbered list is in descending order.

If a numbered list has at least two items with *integer* ordinals (as opposed to number signs), and if the first integer is greater than the second, Up considers the list to be in descending order.

Markup
  ````
  3) Buy milk
  2) Buy bread
  #) Buy happiness
  ````

Output
  3) Buy milk
  2) Buy bread
  #) Buy happiness


Single-item numbered lists
==========================

Like bulleted lists, numbered lists can consist of a single item.

Markup
  ````
  1) Buy milk
  ````

Output
  1) Buy milk

There's a small exception to this rule: If your list item's ordinal is expressed as an integer followed by a period (e.g. `1.`), you must have more than one list item. This exception helps prevent "accidental" numbered lists.

Markup
  ````
  1783. Not a good year for Great Britain.
  ````

Output
  1783. Not a good year for Great Britain.


=================
Description lists
=================

Use description lists represent a collection of subjects and their descriptions.

You can use description lists for:

- Terms and definitions
- Questions and answers
- Any collection of subjects and descriptions!

Markup
  ````
  Kirby's Dreamland
    A video game about a flying marshmallow.

  Super Mario Land
    A video game about a jumping plumber.
  ````

Output
  Kirby's Dreamland
    A video game about a flying marshmallow.

  Super Mario Land
    A video game about a jumping plumber.

Every item in a description list consists of two parts:

1. One or more subjects
2. A single description of those subjects


Subjects
========

Subjects can contain any inline writing convention.

Markup
  ````
  `<ol>`
    An HTML element representing numbered lists.

  `<ul>`
    An HTML element representing bulleted lists.
  ````

Output
  `<ol>`
    An HTML element representing numbered lists.

  `<ul>`
    An HTML element representing bulleted lists.

When there is more than one subject for a given description, they should be listed consecutively, one subject per line.

Markup
  ````
  Game Boy Light
  Game Boy Pocket
  Game Boy Color
    Handheld videogame systems released by Nintendo in the 1990s.
  ````

Output
  Game Boy Light
  Game Boy Pocket
  Game Boy Color
    Handheld videogame systems released by Nintendo in the 1990s.


Descriptions
============

Each description follows the subjects it describes.

Descriptions are indented 2 spaces (or a tab). They can contain any outline writing convention, including other description lists.

Markup
  ````
  Bulbasaur
    A plant Pokémon with a bulb growing from its back.

    Height
      0.7 m
    Weight
      6.9 kg

  Charmander
    A fire Pokémon with a flame on its tail.

    Height
      0.6 m
    Weight
      8.5 kg

Output
  Bulbasaur
    A plant Pokémon with a bulb growing from its back.

    Height
      0.7 m
    Weight
      6.9 kg

  Charmander
    A fire Pokémon with a flame on its tail.

    Height
      0.6 m
    Weight
      8.5 kg

Each description may be followed by an optional blank line. If a description is followed by two blank lines, it marks the end of the description list.

Markup
  ````
  Lime
    A green fruit.
  Strawberry
    A red fruit.


  Bulbasaur
    A green Pokémon.
  Charmander
    A red Pokémon.
  ````

Output
  Lime
    A green fruit.
  Strawberry
    A red fruit.


  Bulbasaur
    A green Pokémon.
  Charmander
    A red Pokémon.


======
Tables
======

You already know what a table is! Use tables to display rows of data organized into columns.

Markup
  ````
  Table: Moves learned by the Pokémon Bulbasaur

  Move;         Type;     Power;  Accuracy

  Tackle;       Normal;   50;     100%
  Growl;        Normal;   ;       100%
  Leech Seed;   Grass;    ;       90%
  Vine Whip;    Grass;    45;     100%
  ````

Output
  Table: Moves learned by the Pokémon Bulbasaur

  Move;         Type;     Power;  Accuracy

  Tackle;       Normal;   50;     100%
  Growl;        Normal;   ;       100%
  Leech Seed;   Grass;    ;       90%
  Vine Whip;    Grass;    45;     100%

A table consists of:

- An optional caption, representing the table's title
- A header row, describing each column
- Content rows, representing the actual data
- An optional header column, describing each row

Table cells are separated by semicolons. To learn more, see [topic: cells].

Our examples use extra spaces to align cells. This makes our markup more readable, but it's strictly optional! If you want, you can squish your cells together, as long as any empty cells contain at least one space. To learn more, please see [topic: empty cells].

Squished markup
  ````
  Table: My favorite fruits

  Fruit;Color;Taste

  Lime;Green;Sour
  Lemon;Yellow;Sour
  Banana;Yellow;Sweet
  ````

Output
  Table: My favorite fruits

  Fruit;Color;Taste

  Lime;Green;Sour
  Lemon;Yellow;Sour
  Banana;Yellow;Sweet


The caption
===========

The text after `Table:` is treated as the table's caption. Captions can contain any inline writing convention.

Markup
  ````
  Table: My favorite [fruits] (en.wikipedia.org/wiki/Fruit)

  Fruit;      Color;      Taste

  Lime;       Green;      Sour
  Lemon;      Yellow;     Sour
  Banana;     Yellow;     Sweet
  ````

Output
  Table: My favorite [fruits] (en.wikipedia.org/wiki/Fruit)

  Fruit;      Color;      Taste

  Lime;       Green;      Sour
  Lemon;      Yellow;     Sour
  Banana;     Yellow;     Sweet

Captions are strongly encouraged, but they're not required. To create a table without a caption, simply put "Table" on its own line.

Markup
  ````
  Table

  Fruit;      Color;      Taste

  Lime;       Green;      Sour
  Lemon;      Yellow;     Sour
  Banana;     Yellow;     Sweet
  ````

Output
  Table

  Fruit;      Color;      Taste

  Lime;       Green;      Sour
  Lemon;      Yellow;     Sour
  Banana;     Yellow;     Sweet


Cells
=====

Table cells are separated by semicolons. If you want to include a semicolon in a cell, simply put a backslash before it. To learn more, see [topic: disabling special characters].

Markup
  ````
  Table: My favorite fruits

  Fruit;      Reason for liking

  Apples;     Easy to eat\; stylish
  Grapes;     Each grape is very cheap
  Oranges;    The color orange is nice
  ````

Output
  Table: My favorite fruits

  Fruit;      Reason for liking

  Apples;     Easy to eat\; stylish
  Grapes;     Each grape is very cheap
  Oranges;    The color orange is nice

-------------------------------
Cells spanning multiple columns
-------------------------------

If you want a cell to span two columns, terminate that cell with two semicolons.

Markup
  ````
  Table: My favorite fruits

  Fruit;      Color;      Taste

  Lime;       Green;      Sour
  Orange;;                Sweet and tart
  Banana;     Yellow;     Sweet
  ````

Output
  Table: My favorite fruits

  Fruit;      Color;      Taste

  Lime;       Green;      Sour
  Orange;;                Sweet and tart
  Banana;     Yellow;     Sweet

Likewise, if you want a cell to span six columns, terminate that cell with six semicolons.

-----------
Empty cells
-----------

A cell consisting solely of spaces (one or more) is considered empty.

Normally, you have to put at least one space in the cell, because consecutive semicolons indicate that you want the previous cell to span multiple columns.

However, to indicate that the *first* cell in a row should be empty, simply start that row with a semicolon. You don't need to put any spaces before it.

Markup
  ````
  Table: Games in the Chrono series

  Release Date;       Game;

  March 11, 1995;     Chrono Trigger
  November 18, 1999;  Chrono Cross
  ;                   Chrono Break
  ````

Output
  Table: Games in the Chrono series

  Release Date;       Game

  March 11, 1995;     Chrono Trigger
  November 18, 1999;  Chrono Cross
  ;                   Chrono Break

Likewise, to indicate that the *last* cell in a row should be empty, simply end that row with a semicolon. You don't need to add any spaces after it.

Markup
  ````
  Table: Games in the Chrono series

  Game;               Release Date

  Chrono Trigger;     March 11, 1995
  Chrono Cross;       November 18, 1999
  Chrono Break;
  ````

Output
  Table: Games in the Chrono series

  Game;               Release Date

  Chrono Trigger;     March 11, 1995
  Chrono Cross;       November 18, 1999
  Chrono Break;


The header row
==============

The header defines each column in the table.

The single blank lines before and after the header are not required.

Markup
  ````
  Table: Moves learned by the Pokémon Bulbasaur
  Move;         Type;     Power;  Accuracy
  Tackle;       Normal;   50;     100%
  Growl;        Normal;   ;       100%
  Leech Seed;   Grass;    ;       90%
  Vine Whip;    Grass;    45;     100%
  ````

Output
  Table: Moves learned by the Pokémon Bulbasaur
  Move;         Type;     Power;  Accuracy
  Tackle;       Normal;   50;     100%
  Growl;        Normal;   ;       100%
  Leech Seed;   Grass;    ;       90%
  Vine Whip;    Grass;    45;     100%

Cells in a table's header can contain any inline writing convention.


Content rows
============

The "content rows" of a table follow its header row. The content rows contain the table's actual data.

If a content row is followed by a blank line, it ends the table.

Markup
  ````
  Table: Moves learned by the Pokémon Bulbasaur

  Move;         Type;     Power;  Accuracy

  Tackle;       Normal;   50;     100%
  Growl;        Normal;   ;       100%
  Leech Seed;   Grass;    ;       90%
  Vine Whip;    Grass;    45;     100%

  I love Bulbasaur!

  ````

Output
  Table: Moves learned by the Pokémon Bulbasaur

  Move;         Type;     Power;  Accuracy

  Tackle;       Normal;   50;     100%
  Growl;        Normal;   ;       100%
  Leech Seed;   Grass;    ;       90%
  Vine Whip;    Grass;    45;     100%

  I love Bulbasaur!

Content row cells can contain any inline writing convention.


Including a header column in your table
=======================================

To indicate your table has a header column, simply indent its header *row* at least two spaces (or a tab).

When you indent a table's the header row, Up automatically treats the first cell in each subsequent row as the header column.

Markup
  ````
  Table: Moves learned by the Pokémon Bulbasaur

                Type;     Power;  Accuracy

  Tackle;       Normal;   50;     100%
  Growl;        Normal;   ;       100%
  Leech Seed;   Grass;    ;       90%
  Vine Whip;    Grass;    45;     100%
  ````

Output
  Table: Moves learned by the Pokémon Bulbasaur

                Type;     Power;  Accuracy

  Tackle;       Normal;   50;     100%
  Growl;        Normal;   ;       100%
  Leech Seed;   Grass;    ;       90%
  Vine Whip;    Grass;    45;     100%

When your table has a header column, Up automatically inserts an extra blank cell at the beginning of the header row in the top level corner, above the header column.


===========
Code blocks
===========

Use the code block convention to represent a block of computer code.

When you need to represent only a small fragment of computer code, consider using [topic: inline code] instead.

Markup
  ````````
  ```
  function nthFibonacci(n: number): number {
    return n <= 2
      ? n - 1
      : nthFibonacci(n - 1) + nthFibonacci(n - 2)
  }
  ```
  ````````

Output
  ```
  function nthFibonacci(n: number): number {
    return n <= 2
      ? n - 1
      : nthFibonacci(n - 1) + nthFibonacci(n - 2)
  }
  ```

Code blocks are surrounded (underlined and "overlined") by matching streaks of 3 or more backticks.

If there is no matching end streak, the code block extends to the end of the document (or to the end of the current outline writing convention, if the code block is nested within one).

Within a code block, indentation is preserved, and every single character is treated literally. No other writing conventions are recognized, which means code blocks don't support [topic: disabling].


Including streaks of backticks
==============================

Code blocks can contain streaks of backticks that aren't exactly as long as the enclosing streaks.

Markup
  `````````
  ``````
  A code block:

  ```
  function factorial(n: number): number {
    return n <= 1
      ? 1
      : n * factorial(n - 1)
  }
  ```

  See? Not so hard!
  ``````
  `````````

Output
  ``````
  A code block:

  ```
  function factorial(n: number): number {
    return n <= 1
      ? 1
      : n * factorial(n - 1)
  }
  ```

  See? Not so hard!
  ``````


=====================================
Linkifying another writing convention
=====================================

You can put [topic: images] inside of [topic: links], but the syntax can be a bit messy.

Messy markup
  ````
  [(image: Warlocked box art) (i.imgur.com/879AeYU.jpg)] [en.wikipedia.org/wiki/Warlocked]
  ````

Output
  [(image: Warlocked box art) (i.imgur.com/879AeYU.jpg)] [en.wikipedia.org/wiki/Warlocked]

That's a lot of brackets! Luckily, there's a shortcut.

Simply place the "linkifying" URL after the image's own URL, and Up will produce a link for you.

Cleaner markup
  ````
  [image: Warlocked box art] [i.imgur.com/879AeYU.jpg] (en.wikipedia.org/wiki/Warlocked)
  ````

Output
  [image: Warlocked box art] [i.imgur.com/879AeYU.jpg] (en.wikipedia.org/wiki/Warlocked)

When linkifying an image, you can mix and match square brackets and parentheses---they're totally interchangeable.

This shortcut also works for the following inline writing conventions:

[topic: Example user input]
  Markup
    ````
    Press {space} (en.wikipedia.org/wiki/Space_bar) to continue.
    ````

  Output
    Press {space} (en.wikipedia.org/wiki/Space_bar) to continue.

[topic: Footnotes]
  Markup
    ````
    Pokémon is old [^ Released in 1996!] (en.wikipedia.org/wiki/Pokémon_Red_and_Blue) but it maintains its charm.
    ````

  Output
    Pokémon is old [^ Released in 1996!] (en.wikipedia.org/wiki/Pokémon_Red_and_Blue) but it maintains its charm.

[topic: Inline revealables]
  Markup
    ````
    At the end of Pokémon Red, [SPOILER: you battle your rival] (pokemon.wikia.com/wiki/Rival) before the credits roll.
    ````

  Output
    At the end of Pokémon Red, [SPOILER: you battle your rival] (pokemon.wikia.com/wiki/Rival) before the credits roll.


=================================
Typographical writing conventions
=================================

Ellipsis
========

Consecutive periods represent an ellipsis, so Up replaces them with a fancy ellipsis character.

Markup
  ````
  I don't know... I doubt a dog would do this.
  ````

Output
  I don't know... I doubt a dog would do this.

If you're a software developer using the Up library, you can specify a different fancy ellipsis (e.g. `⋯`). To learn more, see [topic: `fancyEllipsis`].


En dash
=======

Two consecutive hyphens produce an en dash.

Markup
  ````
  I agree -- to an extent -- with your plan to eat nothing but cereal.
  ````

Output
  I agree -- to an extent -- with your plan to eat nothing but cereal.


Em dash
=======

Three consecutive hyphens produce an em dash.

Markup
  ````
  Use a spoon---a fork won't cut it.
  ````

Output
  Use a spoon---a fork won't cut it.


Plus-minus sign
===============

A plus sigh followed by a hyphen produces a plus-minus sign.

Markup
  ````
  I ate 5 waffles +- 2.
  ````

Output
  I ate 5 waffles +- 2.


==============================
Excessive delimiter characters
==============================

For [topic: emphasis], [topic: stress], [topic: italic], [topic: bold], [topic: highlighting], and [topic: inline quotes], Up ignores any excessive delimiter characters.

Markup
  ````
  This is a """"great"""" pie.
  ````

Output
  This is a """"great"""" pie.

This includes when delimiter characters aren't perfectly balanced on either side.

Markup
  ````
  My favorite video game is _Chrono Cross__.
  ````

Output
  My favorite video game is _Chrono Cross__.


============================
Disabling special characters
============================

To disable the special meaning of a character, put a backslash before it.

Markup
  ````
  I love \*asterisks*!
  ````

Output
  I love \*asterisks\*!

Likewise, to disable the special meaning of a backslash, put another backslash before it.

Markup
  ````
  My favorite kind of slash is the backslash: \\. What is yours?
  ````

Output
  My favorite kind of slash is the backslash: \\. What is yours?


===============================
Overlapping writing conventions
===============================

In Up, inline writing conventions can freely overlap.

Markup
  ````
  John **enjoys ==sleeping** late== whenever he can.
  ````

Output
  John **enjoys ==sleeping** late== whenever he can.


Superficial overlapping
=======================

If conventions overlap superficially---by only their start or end delimiters---Up pretends they weren't overlapped at all.

Markup
  ````
  At the end of Pokémon Red, [SPOILER: you battle your rival *yet again]* before the credits roll.
  ````

Output
  At the end of Pokémon Red, [SPOILER: you battle your rival *yet again]* before the credits roll.



####################
Using the Up library
####################

The Up library can be [found on NPM] (npmjs.com/package/up-lang).


============
Installation
============

````
npm install up-lang --save
````


==============
Usage Overview
==============

Typically, you'll want to use one of the various [topic: functions] exported by the library.

````
const { parseAndRender } = require('up-lang')

const html = parseAndRender(markup, optionalSettings)
````

Alternatively, you can use the exported `Up` class, which can be helpful if you need to parse or render several documents sharing custom settings. Please see [topic: `Up`] to learn more.

If you plan to modify or analyze a parsed document, you'll want to check out the [topic: abstract syntax tree classes].


=========
Functions
=========

`parseAndRender` (function)
===========================

This function converts Up markup into HTML and returns the result.

Arguments
  `markup`: `string`
    The Up markup to convert into HTML.
  `settings` (optional): [topic: `Settings`]
    The custom parsing and/or rendering settings to apply.

Return type: `string`
  This function returns HTML representing the rendered document.

Usage
  Without custom settings
    ````
    const html = parseAndRender(markup)
    ````

  With custom settings
    ````
    const html = parseAndRender(markup, {
      parsing: {
        createSourceMap: true,
        keywords: { audio: "listen" }
      },
      rendering: {
        idPrefix: "article"
      }
    })
    ````


`parseAndRenderWithTableOfContents` (function)
==============================================

This function converts Up markup into two pieces of HTML, both of which are returned:

1. A table of contents
2. The document itself

Arguments
  `markup`: `string`
    The Up markup to parse and render.
  `settings` (optional): [topic: `Settings`]
    The custom parsing and/or rendering settings to apply.

Return type: [topic: `DocumentAndTableOfContentsHtml`]
  This function returns HTML representing the rendered document and table of contents.

Usage
  Without custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      parseAndRenderWithTableOfContents(markup)
    ````

  With custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      parseAndRenderWithTableOfContents(markup, {
        parsing: {
          createSourceMap: true,
          keywords: { audio: "listen" }
        },
        rendering: {
          idPrefix: "article",
          terms: { reveal: "expand" }
        }
      })
    ````


--------------------------------------------
`DocumentAndTableOfContentsHtml` (interface)
--------------------------------------------

This interface represents the HTML for a rendered document and its table of contents.

Members
  `tableOfContentsHtml`: `string`
    The HTML for the table of contents.

  `documentHtml`: `string`
    The HTML for the document itself.

Notes
  The following functions return an object satisfying this interface:

  - [topic: `parseAndRenderWithTableOfContents`]
  - [topic: `renderWithTableOfContents`]


`parseAndRenderInline` (function)
=================================

This function converts inline Up markup into inline HTML and returns the result.

To learn more about inline documents, see [topic: inline documents].

Arguments
  `inlineMarkup`: `string`
    The inline Up markup to convert into inline HTML.
  `parsingSettings` (optional): [topic: `Settings`]
    The custom parsing and/or rendering settings to apply.

Return type: `string`
  This function returns HTML representing the rendered inline document.

Usage
  Without custom settings
    ````
    const html = parseAndRenderInline(markup)
    ````

  With custom settings
    ````
    const html = parseAndRenderInline(markup, {
      parsing: {
        baseForUrlsStartingWithSlash: "https://example.com/en-us",
        keywords: { audio: "listen" }
      },
      rendering: {
        idPrefix: "byline",
        terms: {
          footnoteReference: "footnote mention",
          reveal: "show"
        }
      }
    })
    ````


`parse` (function)
==================

This function parses Up markup and returns the resulting syntax tree.

Arguments
  `markup`: `string`
    The Up markup to parse.

  `parsingSettings` (optional): [topic: `Settings.Parsing`]
    The custom parsing settings to apply.

Return type: [topic: `Document`]
  This function returns a syntax tree representing the parsed document.

Usage
  Without custom settings
    ````
    const html = parse(markup)
    ````

  With custom settings
    ````
    const document = parse(markup, {
      createSourceMap: true,
      keywords: { audio: "listen" }
    })
    ````


`parseInline` (function)
========================

This function parses inline Up markup and returns the resulting inline syntax tree.

To learn more about inline documents, see [topic: inline documents].

Arguments
  `inlineMarkup`: `string`
    The inline Up markup to parse.

  `parsingSettings` (optional): [topic: `Settings.Parsing`]
    The custom parsing settings to apply.

Return type: [topic: `InlineDocument`]
  This function returns an inline syntax tree representing the parsed document.

Usage
  Without custom settings
    ````
    const html = parseInline(markup)
    ````

  With custom settings
    ````
    const html = parseInline(markup, {
      baseForUrlsStartingWithSlash: "https://example.com/en-us",
      keywords: { audio: "listen" }
    })
    ````


`render` (function)
===================

This function converts a syntax tree into HTML and returns the result.

Arguments
  `document`: [topic: `Document`]
    The syntax tree to convert into HTML.

  `renderingSettings` (optional): [topic: `Settings.Rendering`]
    The custom rendering settings to apply.

Return type: `string`
  This function returns HTML representing the rendered document.

Usage
  Without custom settings
    ````
    const html = render(document)
    ````

  With custom settings
    ````
    const html = render(document, {
      idPrefix: "article",
      terms: {
        footnoteReference: "footnote mention",
        reveal: "show"
      }
    })
    ````


`renderWithTableOfContents` (function)
======================================

This function converts a syntax tree into two pieces of HTML, both of which are returned:

1. A table of contents
2. The document itself

Arguments
  `document`: [topic: `Document`]
    The syntax tree to convert into HTML.

  `renderingSettings` (optional): [topic: `Settings.Rendering`]
    The custom rendering settings to apply.

Return type: [topic: `DocumentAndTableOfContentsHtml`]
  This function returns HTML representing the rendered document and table of contents.

Usage
  Without custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      renderWithTableOfContents(document)
    ````

  With custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      renderWithTableOfContents(document, {
        idPrefix: "article",
        terms: { revveal: "expand" }
      })
    ````


`renderInline` (function)
=========================

This function converts an inline syntax tree into inline HTML and returns the result.

To learn more about inline documents, see [topic: inline documents].

Arguments
  `inlineDocument`: [topic: `InlineDocument`]
    The inline syntax tree to convert into HTML.

  `renderingSettings` (optional): [topic: `Settings.Rendering`]
    The custom rendering settings to apply.

Return type: `string`
  This function returns HTML representing the rendered inline document.

Usage
  Without custom settings
    ````
    const html = renderInline(inlineDocument)
    ````

  With custom settings
    ````
    const html = renderInline(inlineDocument, {
      idPrefix: "byline",
      terms: {
        footnoteReference: "footnote mention",
        reveal: "show"
      }
    })
    ````



============
`Up` (class)
============

Purpose
  Anything you can accomplish using the `Up` class, you can accomplish using the regular [topic: functions] exported by the library.

  However, the `Up` class can be helpful if you need to parse or render several documents sharing custom settings.

  Those shared settings can be provided just once---in the constructor. Then, when calling methods on your object, you only need to provide settings that overwrite (or supplement) the ones you provided to the constructor.

  ````
  const { Up } = require('up-lang')

  const up = new Up(settings)
  const html = up.parseAndRender(markup, changedSettings)
  ````


Constructor arguments
  `settings` (optional): [topic: `Settings`]
    The custom parsing and/or rendering settings to apply for all subsequent method calls.

Members
  This class's methods have the same names and arguments as the [topic: functions] in the library:

  - [topic: `parseAndRender`]
  - [topic: `parseAndRenderWithTableOfContents`]
  - [topic: `parseAndRenderInline`]
  - [topic: `parse`]
  - [topic: `parseInline`]
  - [topic: `render`]
  - [topic: `renderWithTableOfContents`]
  - [topic: `renderInline`]

  When a method is invoked with custom settings, those settings are merged with the settings provided to the constructor. If any individual settings conflict, Up uses the conflicting values provided to the method.

  Example
    ````
    const up = new Up({
      parsing: {
        createSourceMap: true,
        fancyEllipsis: "⋯",
        keywords: {
          audio: ["sound", "song"],
          revealable: "hide"
        }
      },
      rendering: {
        terms: { reveal: "expand" }
      }
    })

    const html = up.parseAndRender(markup, {
      parsing: {
        createSourceMap: false,
        keywords: {
          audio: "listen"
        }
      },
      rendering: {
        idPrefix: "article"
      }
    })
    ````

  Discussion
    In the above example, the following settings are ultimately applied:

    ````
    {
      parsing: {
        createSourceMap: false,
        fancyEllipsis: "⋯",
        keywords: {
          audio: "listen",
          revealable: "hide"
        }
      },
      rendering: {
        idPrefix: "article",
        terms: { reveal: "expand" }
      }
    }
    ````



=============
Configuration
=============

All functions accept custom settings!

For a full description of Up's functions, see [topic: functions].


`Settings` (interface)
======================

Summary
  The `Settings` interface includes both parsing settings and rendering settings.

  Use this interface to provide custom settings to functions that both parse markup *and* render the result to HTML:

  - [topic: `parseAndRender`]
  - [topic: `parseAndRenderWithTableOfContents`]
  - [topic: `parseAndRenderInline`]

Usage
  ````
  const html = parseAndRender(markup, {
    parsing: {
      createSourceMap: true,
      keywords: { audio: "listen" }
    },
    rendering: {
      idPrefix: "article"
    }
  })
  ````

Members (both of which are optional)
  `parsing`: [topic: `Settings.Parsing`]
    The custom parsing settings to apply.

  `rendering`: [topic: `Settings.Rendering`]
    The custom rendering settings to apply.


`Settings.Parsing` (interface)
==============================

Summary
  The `Settings.Parsing` interface includes all parsing settings.

  Use this interface to provide custom settings to functions that parse markup and return the resulting syntax tree:

  - [topic: `parse`]
  - [topic: `parseInline`]

  As part of [topic: `Settings`], this interface also provides parsing custom settings to functions that both parse markup *and* render the result to HTML:

  - [topic: `parseAndRender`]
  - [topic: `parseAndRenderWithTableOfContents`]
  - [topic: `parseAndRenderInline`]

Usage
  ````
  const document = parse(markup, {
    createSourceMap: true,
    keywords: {
      audio: ["sound", "song"],
      audio: "listen"
    }
  })
  ````

Members (all of which are optional)
  [topic: `createSourceMap`]: `boolean`
    Enables source mapping.

  [topic: `defaultUrlScheme`]: `string`
    The default URL scheme for URLs without one.

  [topic: `baseForUrlsStartingWithSlash`]: `string`
    The base for URLs starting with `/`.

  [topic: `baseForUrlsStartingWithHashmark`]: `string`
    The base for URLs starting with `#`.

  [topic: `fancyEllipsis`]: `string`
    Up replaces consecutive periods with this fancy ellipsis.

  `keywords` (all of which are optional)

    --------------------
    Customizing keywords
    --------------------

    You can provide unlimited custom variations for each keyword. Custom keyword variations do not overwrite the default keywords.

    ````
    const document = parse(markup, {
      keywords: {
        audio: ["sound", "song"],
        audio: "listen"
      }
    })
    ````

    Like the default keywords, custom keyword variations are case-insensitive.

    `audio`: `string` or `string[]`
      Recognized by [topic: audio].

    `image`: `string` or `string[]`
      Recognized by [topic: images].

    `revealable`: `string` or `string[]`
      Recognized by [topic: inline revealables] and [topic: revealable blocks].

    `sectionLink`: `string` or `string[]`
      Recognized by [topic: section links].

    `table`: `string` or `string[]`
      Recognized by [topic: tables].

    `video`: `string` or `string[]`
      Recognized by [topic: video].


---------------------------
`createSourceMap` (setting)
---------------------------

Summary
  When `createSourceMap` is enabled, Up keeps track of the original line number for every instance of every outline writing convention.

Default
  `false`

Usage
  ````
  const html = parseAndRender(markup, {
    parsing: {
      createSourceMap: true
    }
  })
  ````

Context
  This setting belongs to [topic: `Settings.Parsing`].

Details
  `createSourceMap` works by setting the `sourceLineNumber` of each [topic: `OutlineSyntaxNode`].


----------------------------
`defaultUrlScheme` (setting)
----------------------------

Summary
  The `defaultUrlScheme` is prefixed to any link URL or media URL without a URL scheme.

  For URLs *with* a URL scheme, this setting has no effect. Furthermore, this setting is not applied to URLs that start with `/` or `#`. For those URLs, see [topic: `baseForUrlsStartingWithSlash`] or [topic: `baseForUrlsStartingWithHashmark`].

Default
  `"https://"`

Usage
  ````
  const html = parseAndRender(markup, {
    parsing: {
      defaultUrlScheme: "my-app://"
    }
  })
  ````

Context
  This setting belongs to [topic: `Settings.Parsing`].


----------------------------------------
`baseForUrlsStartingWithSlash` (setting)
----------------------------------------

Summary
  The `baseForUrlsStartingWithSlash` is prefixed to any link URL or media URL starting with `/`.

Default
  `""` (an empty string)

Usage
  ````
  const html = parseAndRender(markup, {
    parsing: {
      baseForUrlsStartingWithSlash: "https://example.com/blog/"
    }
  })
  ````

Context
  This setting belongs to [topic: `Settings.Parsing`].


-------------------------------------------
`baseForUrlsStartingWithHashMark` (setting)
-------------------------------------------

Summary
  The `baseForUrlsStartingWithSlash` is prefixed to any link URL or media URL starting with `#`.

Default
  `""` (an empty string)

Usage
  ````
  const html = parseAndRender(markup, {
    parsing: {
      baseForUrlsStartingWithHashMark: "https://example.com/blog/post/28"
    }
  })
  ````

Context
  This setting belongs to [topic: `Settings.Parsing`].


-------------------------
`fancyEllipsis` (setting)
-------------------------

Summary
  Up automatically replaces consecutive periods with `fancyEllipsis`.

  By default, `fancyEllipsis` is `…`. If you want Up to use a different fancy ellipsis (e.g. `⋯` or even `. . .`), set `fancyEllipsis` accordingly.

Default
  `"…"`

Usage
  ````
  const html = parseAndRender(markup, {
    parsing: {
      fancyEllipsis: "⋯"
    }
  })
  ````

Context
  This setting belongs to [topic: `Settings.Parsing`].


`Settings.Rendering` (interface)
================================

Summary
  The `Settings.Rendering` interface includes all rendering settings.

  Use this interface to provide custom settings to functions that render syntax trees to HTML:

  - [topic: `render`]
  - [topic: `renderWithTableOfContents`]
  - [topic: `renderInline`]

  As part of [topic: `Settings`], this interface also provides custom rendering settings to functions that both parse markup *and* render the result to HTML:

  - [topic: `parseAndRender`]
  - [topic: `parseAndRenderWithTableOfContents`]
  - [topic: `parseAndRenderInline`]

Usage
  ````
  const html = render(document, {
    idPrefix: "article",
    terms: {
      footnoteReference: "footnote mention",
      reveal: "show"
    }
  })
  ````

Members (all of which are optional)
  [topic: `idPrefix`]: `string`
    The prefix to apply to HTML IDs.

  [topic: `renderDangerousContent`]: `boolean`
    Enables the rendering of dangerous content. Enabling this setting is not recommended!

  `terms` (all of which are optional)
    `footnote`: `string`
      Appears in the URLs of links pointing to footnotes in their footnote blocks.

    `footnoteReference`: `string`
      Appears in the URLs of links pointing back to footnote references (i.e. back to the superscripts within paragraphs).

    `hide`: `string`
      Appears on the button that hides revealable content.

    `reveal`: `string`
      Appears on the button that reveals revealable content.

    `sectionReferencedByTableOfContents`: `string`
      Appears in the URLs of table of contents entries.

    You don't need to worry about escaping any characters in your custom terms! Up handles that for you.


--------------------
`idPrefix` (setting)
--------------------

Summary
  If you are rendering multiple documents onto the same page, you need to use this setting to prevent HTML ID collisions between documents.

  By default, `idPrefix` is `up` to prevent ID collisions with any HTML elements *not* rendered by Up. If you don't want any ID prefix, you can set `idPrefix` to an empty string.

Usage
  ````
  const html = parseAndRender(markup, {
    rendering: {
      idPrefix: "article"
    }
  })
  ````

Context
  This setting belongs to [topic: `Settings.Rendering`].

Details
  You don't need to worry about escaping HTML for your `idPrefix`---Up automatically handles that for you. Furthermore, Up automatically converts any spaces in your `idPrefix` to hyphens.

Default
  `"up"`


----------------------------------
`renderDangerousContent` (setting)
----------------------------------

Summary
  Normally, Up will not render links or media elements with potentially exploitable URI schemes: `javascript`, `vbscript`, `data`, and `file`.

  When this setting is enabled, Up will dutifully render all links and media elements.

Usage
  ````
  const html = parseAndRender(markup, {
    rendering: {
      renderDangerousContent: true
    }
  })
  ````

Context
  This setting belongs to [topic: `Settings.Rendering`].

Details
  By default, dangerous media elements produce no HTML at all. Dangerous links produce no HTML of their own, though their child elements are rendered.

Default
  `false`



================
Inline documents
================

In certain contexts, you might want to restrict a document to just a single line:

- A chat message
- The title of a thread on a message board
- The byline for a user's profile

That's what inline documents are for! To take advantage of inline documents, use one of the following functions:

- [topic: `parseAndRenderInline`]
- [topic: `parseInline`]
- [topic: `renderInline`]


Syntax differences
==================

Within inline documents, Up ignores all outline writing conventions. Furthermore, [topic: footnotes] and [topic: section links] aren't supported.

When Up encounters a footnote in an inline document, it pretends the author had used parentheses instead of a footnote.

Inline markup
  ````
  My dad [^ Professor Oak] is very wise.
  ````
Output
  My dad (Professor Oak) is very wise.

Within inline documents, Up doesn't recognize the syntax for section links. Consequently, their markup is instead treated as regular old text enclosed within brackets.

Inline markup
  ````
  I enjoyed our conversation [topic: the weather].
  ````
Output
  I enjoyed our conversation [\topic: the weather].


Rendered HTML
=============

When inline documents are rendered, the resulting HTML is *not* enclosed within any container element (e.g. `<p>`).

Inline markup
  ````
  I *really* like Starcraft.
  ````

Rendered inline HTML
  ````
  I <em>really</em> like Starcraft.
  ````



============================
Abstract syntax tree classes
============================

Unless you're fiddling with the abstract syntax tree of a parsed document, you can safely ignore this section.

The Up library exports every class used in the abstract syntax tree.

````
const { Blockquote } = require("up-lang")

if (syntaxNode instanceof Blockquote) {
  // Do something exciting
}
````

If you're using TypeScript, you can take advantage of the library's built-in type declarations. This includes several interface types, all of which are described below.


`Document` (class)
==================

Purpose
  This class represents the syntax tree for a parsed document.

Extends
  [topic: `OutlineSyntaxNodeContainer`]

Unique members
  `tableOfContents`: [topic: Document.TableOfContents]
    An object representing the document's table of contents.

  `create` method (static)
    Purpose
      This method returns a ready-to-render syntax tree from a collection of outline syntax nodes.

      Usually, you'll want to use this static method instead of the constructor.

    Arguments
      `children`: array of [topic: `OutlineSyntaxNode`]
        A collection of outline syntax nodes representing the content of this document.

    Return type: [topic: `Document`]
      This method creates and returns a ready-to-render `Document` object.

      To prepare the document for rendering, this method:

      - Assigns footnotes their reference numbers
      - Extracts footnotes into footnote blocks
      - Produces a table of contents
      - Matches section links with table of contents entries

Constructor arguments
  `children`: array of [topic: `OutlineSyntaxNode`]
    A collection of outline syntax nodes representing the content of this document.

  `tableOfContents` (optional): [topic: `Document.TableOfContents`]
    The document's table of contents.

Rendered HTML
  When rendered to HTML, the document is *not* put into an outer container element.

  ````
  <p>
    Unlike regular dental floss, you can use floss picks even if you're <em>not</em> a trained dental hygienist.
  </p>
  <p>
    Floss picks are sold in stylish, resealable plastic bags. You have no excuse not to buy some today.
  </p>
  ````


----------------------------------
`Document.TableOfContents` (class)
----------------------------------

Purpose
  This class represents the table of contents for a document. The table of contents includes every heading except those found within [topic: revealable content].

Members
  `entries`: array of [topic: `Document.TableOfContents.Entry`]
    A collection of entries representing headings in the document. In fact, the objects in this collection are the same [topic: `Heading`] objects in the document itself.

Constructor arguments
  `entries`: array of [topic: `Document.TableOfContents.Entry`]
    The entries in the table of contents.

Rendered HTML
  Each entry in the table of contents renders a heading element corresponding to its `level`. This heading element contains a link to the appropriate section in the document.

  To learn more on how headings are rendered, please see [topic: `Heading`].

  ````
  <h1>
    <a href="#up-topic-1">Fun things</a>
  </h1>
  <h2>
    <a href="#up-topic-2">Games</a>
  </h2>
  <h3>
    <a href="#up-topic-3">Video games</a>
  </h3>
  <h4>
    <a href="#up-topic-4">Released in the 2000s</a>
  </h4>
  <h5>
    <a href="#up-topic-5">For Nintendo devices</a>
  </h5>
  <h6>
    <a href="#up-topic-6">Nintendo 64</a>
  </h6>
  <div aria-level="7" role="heading">
    <a href="#up-topic-6">Pokémon Puzzle League</a>
  </div>
  <h6>
    <a href="#up-topic-8">Game Boy</a>
  </h6>
  <div aria-level="7" role="heading">
    <a href="#up-topic-9">Game Boy Color Exclusives</a>
  </div>
  <div aria-level="8" role="heading">
    <a href="#up-topic-10">Warlocked</a>
  </div>
  ````


`Document.TableOfContents.Entry` (interface)
--------------------------------------------

Purpose
  This interface represents an entry in the table of contents.

Members
  `ordinalInTableOfContents`: `number`
    The entry's ordinal in the table of contents. The first ordinal is `1`, not `0`.

  `level`: `number`
    The heading level of the entry. Like HTML heading levels, a level of 1 is considered the most significant.

  `children`: array of [topic: InlineSyntaxNode]
    The inline syntax nodes representing this entry in the table of contents.

  `titleMarkup`: string
    Currently, headings are the only writing convention that produce table of contents entries, so the `titleMarkup` field always represents the markup for the "content line" of a heading.

    Section links compare their `markupSnippetFromSectionTitle` against this field.

  `sourceLineNumber`: `number`
    If [topic: `createSourceMap`] is enabled, this field is set to the line number of the first line of markup that produced the heading represented by this entry. Source line numbers start at `1`, not `0`.

    When rendered to HTML, entries with source line numbers are given a `data-up-source-line` attribute set the appropriate line number.

    ````
    <h3 data-up-source-line="51">
      <a href="#up-topic-5">Video games</a>
    </h3>
    ````

  `contentWithinTableOfContents` method
    Return type: array of [topic: `InlineSyntaxNode`]
      This method returns the inline syntax nodes that should represent this entry's content inside the table of contents itself.

    Arguments
      None.


`InlineDocument` (class)
=======================

Purpose
  This class represents the syntax tree for a parsed inline document.

Extends
  [topic: `InlineSyntaxNodeContainer`]

Constructor arguments
  See the constructor arguments for [topic: `InlineSyntaxNodeContainer`].

Rendered HTML
  When rendered to HTML, an inline document is *not* put into an outer container element.

  ````
  I <em>love</em> dental floss!
  ````


`SyntaxNode` (interface)
========================

Purpose
  All syntax node classes must implement this interface.

Members
  `inlineDescendants` method
    Return type: array of [topic: `InlineSyntaxNode`]
      This method returns all inline descendants (including children, grandchildren, etc.).

    Arguments
      None.

Notes
  This interface also has a `render` method, but it isn't relevant to developers using the Up library.


`InlineSyntaxNode` (interface)
==============================

Purpose
  All inline syntax node classes must implement this interface.

Extends
  [topic: `SyntaxNode`]

Unique members
  `searchableText` method
    Return type: `string`
      This method returns the searchable text of the syntax node.

      Ultimately, this method helps match [topic: section links] to the the most appropriate table of content entry.

    Arguments
      None.

  `textAppearingInline` method
    Return type: `string`
      This method returns the text of the syntax node as it should appear inline. Some inline writing conventions don't have any text appearing inline, including [topic: footnotes] and [topic: images].

      This method is helps determine whether table cells are numeric.

    Arguments
      None.


`OutlineSyntaxNode` (interface)
===============================

Purpose
  All outline syntax node classes must implement this interface.

Extends
  [topic: `SyntaxNode`]

Unique members
  `sourceLineNumber`: `number`
    If [topic: `createSourceMap`] is enabled, this field is set to the first line of markup that produced this syntax node. Source line numbers start at `1`, not `0`.

    HTML elements rendered by outline syntax nodes with source line numbers are given a `data-up-source-line` attribute set the appropriate line number.

    ````
    <p data-up-source-line="24">Hi there!</p>
    ````

  `descendantsToIncludeInTableOfContents` method
    Return type: array of [topic: `Document.TableOfContents.Entry`]
      This method returns any descendants (at any nesting level) to include in the table of contents.

    Arguments
      None.


`RichInlineSyntaxNode` (class)
==============================

Purpose
  This abstract class represents an inline syntax node that can contain other inline syntax nodes.

Extends
  [topic: `InlineSyntaxNodeContainer`]

Implements
  [topic: `InlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `InlineSyntaxNodeContainer`].


`RichOutlineSyntaxNode` (class)
===============================

Purpose
  This abstract class represents an outline syntax node that can contain other outline syntax nodes.

Extends
  [topic: `OutlineSyntaxNodeContainer`]

Implements
  [topic: `OutlineSyntaxNode`]

Constructor arguments
  `children`: array of [topic: `OutlineSyntaxNode`]
    A collection of outline syntax nodes representing the content of this syntax node.

  `options` (optional)
    `sourceLineNumber`: number
      The line number of the first line of markup that created this syntax node.


`InlineSyntaxNodeContainer` (class)
===================================

Purpose
  This abstract class represents a container of inline syntax nodes.

Members
  `children`: array of [topic: `InlineSyntaxNode`]
    A collection of inline syntax nodes representing the content of this container.

  `inlineDescendants` method
    Return type: array of [topic: `InlineSyntaxNode`]
      This method returns all inline descendants (including `children`, grandchildren, etc.).

    Arguments
      None.

Constructor arguments
  `children`: array of [topic: `InlineSyntaxNode`]
    This field is described above.


`OutlineSyntaxNodeContainer` (class)
====================================

Purpose
  This abstract class represents a container of inline syntax nodes.

Members
  `children`: array of [topic: `InlineSyntaxNode`]
     A collection of outline syntax nodes representing the content of this container.

  `descendantsToIncludeInTableOfContents` method
    Return type: array of [topic: `Document.TableOfContents.Entry`]
      This method returns any descendants (children, grandchildren, etc.) to include in the table of contents.

    Arguments
      None.

  `inlineDescendants` method
    Return type: array of [topic: `InlineSyntaxNode`]
      This method returns all inline descendants of `children`.

    Arguments
      None.

Constructor arguments
  `children`: array of [topic: `OutlineSyntaxNode`]
    This field is described above.


`MediaSyntaxNode` (class)
=========================

Purpose
  All media syntax node classes extend this abstract class:

  - [topic: `Image`]
  - [topic: `Video`]
  - [topic: `Audio`]

Implements
  [topic: `InlineSyntaxNode`]
    Media conventions can appear inline (i.e. within paragraphs).

  [topic: `OutlineSyntaxNode`]
    If a line consists solely of media conventions (or media conventions within links), those media conventions (or their outer links) are placed directly into the outline.

Unique members
  `description`: `string`
    The media's description.

  `url`: `string`
    Represents the media's URL after the following settings are applied:

    - [topic: `defaultUrlScheme`]
    - [topic: `baseForUrlsStartingWithSlash`]
    - [topic: `baseForUrlsStartingWithHashmark`]

Constructor arguments
  `description`: string
    The media's description.

  `url`: string
    The media's URL.

  `options` (optional)
    `sourceLineNumber`: number
      The line number of the line of markup that created this media syntax node.


`ParentheticalSyntaxNode` (class)
=================================

Purpose
  This abstract class represents [topic: parenthetical text]. It exists solely to improve the expressiveness of the type system.

  It is extended by both [topic: `NormalParenthetical`] and [topic: `SquareParenthetical`].

Extends
  [topic: `RichInlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichInlineSyntaxNode`].


`Audio` (class)
===============

Writing convention
  [topic: Audio]

Extends
  [topic: `MediaSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `MediaSyntaxNode`].

Rendered HTML
  ````
  <audio controls src="https://a.clyp.it/ybct5hcl.mp3" title="Sadness theme from Infinity for Game Boy">
    <a href="https://a.clyp.it/ybct5hcl.mp3">Sadness theme from Infinity for Game Boy</a>
  </audio>
  ````


`Blockquote` (class)
====================

Writing convention
  [topic: Blockquotes]

Extends
  [topic: `RichOutlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichOutlineSyntaxNode`].

Rendered HTML
  ````
  <blockquote>
    <p>Hi there!</p>
  </blockquote>
  ````


`Bold` (class)
==============

Writing convention
  [topic: Audio]

Extends
  [topic: `RichInlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichInlineSyntaxNode`].

Rendered HTML
  ````
  <b>Hi there!</b>
  ````


`BulletedList` (class)
=======================

Writing convention
  [topic: Bulleted lists]

Implements
  [topic: `OutlineSyntaxNode`]

Unique members
  `items`: array of [topic: `BulletedList.Item`]
    The collection of items comprising this bulleted list.

Constructor arguments
  `items`: array of [topic: `BulletedList.Item`]
    This field is described above.

  `options` (optional)
    `sourceLineNumber`: number
      The line number of the first line of markup that created this bulleted list.

Rendered HTML
  ````
  <ul>
    <li>
      <p>Buy milk</p>
    </li>
    <li>
      <p>Buy bread</p>
    </li>
    <li>
      <p>Buy happiness</p>
    </li>
  </ul>
  ````


----------------------------
`BulletedList.Item` (class)
----------------------------

Purpose
  This class represents an item in a bulleted list.

Extends
  [topic: `OutlineSyntaxNodeContainer`]

Constructor arguments
  See the constructor arguments for [topic: `OutlineSyntaxNodeContainer`].


`CodeBlock` (class)
===================

Writing convention
  [topic: Code blocks]

Implements
  [topic: `OutlineSyntaxNode`]

Unique members
  `code`: `string`
    The code represented by this syntax node.

Constructor arguments
  `code`: `string`
    This field is described above.

  `options` (optional)
    `sourceLineNumber`: number
      The line number of the first line of markup that created this code block.

Rendered HTML
  ````
  <pre><code>const message = "Hi there!"</code></pre>
  ````


`DescriptionList` (class)
=========================

Writing convention
  [topic: Description lists]

Implements
  [topic: `OutlineSyntaxNode`]

Unique members
  `items`: array of [topic: `DescriptionList.Item`]
    The collection of items comprising this description list.

Constructor arguments
  `items`: array of [topic: `DescriptionList.Item`]
    This field is described above.

  `options` (optional)
    `sourceLineNumber`: number
      The line number of the first line of markup that created this description list.

Rendered HTML
  ````
  <dl>
    <dt>Kirby's Dreamland</dt>
    <dd>
      <p>A video game about a flying marshmallow.</p>
    </dd>
    <dt>Super Mario Land</dt>
    <dd>
      <p>A video game about a jumping plumber.</p>
    </dd>
  </dl>
  ````


------------------------------
`DescriptionList.Item` (class)
------------------------------

Purpose
  This class represents a collection of subjects and their corresponding description.

Unique members
  `subjects`: array of [topic: `DescriptionList.Item.Subject`]
    The subjects described by `description`.

  `description`: [topic: `DescriptionList.Item.Description`]
    The description of `subjects`.

Constructor arguments
  `subjects`: array of [topic: `DescriptionList.Item.Subject`]
    This field is described above.

  `description`: [topic: `DescriptionList.Item.Description`]
    This field is described above.


`DescriptionList.Item.Subject` (class)
--------------------------------------

Purpose
  This class represents the collection of subjects described by a given description within a description list item.

Extends
  [topic: `InlineSyntaxNodeContainer`]

Constructor arguments
  See the constructor arguments for [topic: `InlineSyntaxNodeContainer`].


`DescriptionList.Item.Description` (class)
------------------------------------------

Purpose
  This class represents the description of a given collection of subjects within a description list item.

Extends
  [topic: `OutlineSyntaxNodeContainer`]

Constructor arguments
  See the constructor arguments for [topic: `OutlineSyntaxNodeContainer`].


`Emphasis` (class)
==================

Writing convention
  [topic: Emphasis]

Extends
  [topic: `RichInlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichInlineSyntaxNode`].

Rendered HTML
  ````
  <em>Hi there!</em>
  ````


`ExampleUserInput` (class)
==========================

Writing convention
  [topic: Example user input]

Implements
  [topic: `InlineSyntaxNode`]

Unique members
  `userInput`: `string`
    The example of user input.

Rendered HTML
  ````
  <kbd>esc</kbd>
  ````


`Footnote` (class)
==================

Writing convention
  [topic: Footnotes]

Extends
  [topic: `RichInlineSyntaxNode`]

Unique members
  `referenceNumber`: `number`
    The number that appears in superscript for this footnote. Within a given document, this value must be unique.

Constructor arguments
  `children`: array of [topic: `InlineSyntaxNode`]
    A collection of inline syntax nodes representing the content of this footnote.

  `options` (optional)
    `referenceNumber`: number
      This field is described above.

Rendered HTML
  ````
  <sup class="up-footnote-reference" id="up-footnote-reference-1">
    <a href="#up-footnote-1">1</a>
  </sup>
  ````


`FootnoteBlock` (class)
=======================

Purpose
  Footnotes are written inline, but they aren't meant to appear inline in the final document. That would defeat the purpose of footnotes! Instead, footnotes are extracted and placed in footnote blocks. This class represents one of those footnote blocks.

Implements
  [topic: `OutlineSyntaxNode`]

Unique members
  `footnotes`: array of [topic: Footnote]
    The collection of footnotes comprising this footnote block.

Constructor arguments
  `footnotes`: array of [topic: Footnote]
    This field is described above.

Rendered HTML
  ````
  <dl class="up-footnotes">
    <dt id="up-footnote-1">
      <a href="#up-footnote-reference-1">1</a>
    </dt>
    <dd>No relation to Warcraft!</dd>
    <dt id="up-footnote-2">
      <a href="#up-footnote-reference-2">2</a>
    </dt>
    <dd>The pathfinding algorithm had issues.</dd>
  </dl>
  ````


`Heading` (class)
=================

Writing convention
  [topic: Headings]

Extends
  [topic: `InlineSyntaxNodeContainer`]

Implements
  [topic: `Document.TableOfContents.Entry`]
    Headings are special! No other syntax node implements this interface.

  [topic: `OutlineSyntaxNode`]
    But headings also serve as regular old outline syntax nodes.


Unique members
  `level`: `number`
    A heading's level represents its significance in the document. Like HTML heading levels, a level of 1 is considered the most significant.

Constructor arguments
  `children`: array of [topic: `InlineSyntaxNode`]
    A collection of inline syntax nodes representing the content of this heading.

  `options`
    `level`: `number`
      This field is described above.

    `titleMarkup`: string
      Represents the markup for the "content line" of this heading.

      Section links compare their `markupSnippetFromSectionTitle` against this field.

    `ordinalInTableOfContents` (optional): `number`
      Represents this heading's ordinal in the table of contents. The first ordinal is `1`, not `0`.

    `sourceLineNumber` (optional): number
      The line number of the first line of markup that created this heading.

Rendered HTML
  Levels 1--6
    Headings with levels 1 through 6 render the appropriate heading element.

    ````
    <h1>
      I am a level 1 heading!
    </h1>

    <h6>
      I am a level 6 heading!
    </h6>
    ````
  Levels 7 and higher
    Headings with levels 7 and higher render `<div role="heading">` elements with an `aria-level` attribute equal to their level.

    ````
    <div aria-level="7" role="heading">
      I am a level 7 heading!
    </div>

    <div aria-level="10" role="heading">
      I am a level 10 heading!
    </div>
    ````


`Highlight` (class)
===================

Writing convention
  [topic: Highlighting]

Extends
  [topic: `RichInlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichInlineSyntaxNode`].

Rendered HTML
  ````
  <mark>Hi there!</mark>
  ````


`Image` (class)
===============

Writing convention
  [topic: Images]

Extends
  [topic: `MediaSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `MediaSyntaxNode`].

Rendered HTML
  ````
  <img alt="Super Mario Land box art" src="https://i.imgur.com/TxlFlkX.jpg" title="Super Mario Land box art">
  ````


`InlineCode` (class)
====================

Writing convention
  [topic: Inline code]

Implements
  [topic: `InlineSyntaxNode`]

Unique members
  `code`: `string`
    The inline code represented by this syntax node.

Constructor arguments
  `code`: `string`
    This field is described above.

Rendered HTML
  ````
  <code class="up-inline-code">interface</code>
  ````


`InlineQuote` (class)
=====================

Writing convention
  [topic: Inline quotes]

Extends
  [topic: `RichInlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichInlineSyntaxNode`].

Rendered HTML
  ````
  <q>I know!</q>
  ````


`InlineRevealable` (class)
==========================

Writing convention
  [topic: Inline revealables]

Extends
  [topic: `RichInlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichInlineSyntaxNode`].

Rendered HTML
  ````
  <span class="up-revealable">
    <input checked class="up-hide" id="up-hide-button-1" name="up-revealable-1" type="radio">
    <label for="up-hide-button-1" role="button" tabindex="0">hide</label>
    <input class="up-reveal" id="up-reveal-button-1" name="up-revealable-1" type="radio">
    <label for="up-reveal-button-1" role="button" tabindex="0">reveal</label>
    <span role="alert">Ash fights Gary</span>
  </span>
  ````


`Italic` (class)
================

Writing convention
  [topic: Italics]

Extends
  [topic: `RichInlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichInlineSyntaxNode`].

Rendered HTML
  ````
  <i>I know!</i>
  ````


`LineBlock` (class)
===================

Writing convention
  [topic: Line blocks]

Implements
  [topic: `OutlineSyntaxNode`]

Unique members
  `lines`: array of [topic: `LineBlock.Line`]
    The collection of lines comprising this line block.

Constructor arguments
  `lines`: array of [topic: `LineBlock.Line`]
    This field is described above.

  `options` (optional)
    `sourceLineNumber`: number
      The line number of the first line of markup that created this syntax node.

Rendered HTML
  ````
  <div class="up-lines">
    <div>Roses are red</div>
    <div>Violets are blue</div>
  </div>
  ````

------------------------
`LineBlock.Line` (class)
------------------------

Purpose
  This class represents a line in a line block.

Extends
  [topic: `InlineSyntaxNodeContainer`]

Constructor arguments
  See the constructor arguments for [topic: `InlineSyntaxNodeContainer`].


`Link` (class)
==============

Writing convention
  [topic: Italics]

Extends
  [topic: `RichInlineSyntaxNode`]

Implements
  [topic: `OutlineSyntaxNode`]
    If a line consists solely of media conventions (or media conventions within links), those media conventions (or their outer links) are placed directly into the outline.

Unique members
  `url`: `string`
    This links's URL after the following settings are applied:

    - [topic: `defaultUrlScheme`]
    - [topic: `baseForUrlsStartingWithSlash`]
    - [topic: `baseForUrlsStartingWithHashmark`]

Constructor arguments
  `children`: array of [topic: `InlineSyntaxNode`]
    A collection of inline syntax nodes representing the content of this link.

  `url`: `string`
    This field is described above.

  `options`
    `sourceLineNumber` (optional): number
      The line number of the line of markup that created this link.

Rendered HTML
  ````
  <a href="https://example.com">Hi there!</a>
  ````


`NormalParenthetical` (class)
=============================

Writing convention
  [topic: Parenthetical text] produced by parentheses

Extends
  [topic: `ParentheticalSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `ParentheticalSyntaxNode`].

Rendered HTML
  ````
  <small class="up-parenthetical">(Hi there!)</small>
  ````


`NumberedList` (class)
=====================

Writing convention
  [topic: Numbered lists]

Implements
  [topic: `OutlineSyntaxNode`]

Unique members
  `items`: array of [topic: `NumberedList.Item`]
    The collection of items comprising this numbered list.

  `start` method
    Return type: `number`
      This method returns the starting ordinal of this list, if one was explicitly defined. Otherwise, this method returns `undefined`.

    Arguments
      None.

  `order` method
    Return type: [topic: `NumberedList.Order`]
      This method returns the order of the numbered list (ascending or descending).

    Arguments
      None.

Constructor arguments
  `items`: array of [topic: `NumberedList.Item`]
    This field is described above.

  `options` (optional)
    `sourceLineNumber`: number
      The line number of the first line of markup that created this numbered list.

Rendered HTML
  ````
  <ol reversed start="3">
    <li value="3">
      <p>Buy milk</p>
    </li>
    <li value="2">
      <p>Buy bread</p>
    </li>
    <li>
      <p>Buy happiness</p>
    </li>
  </ol>
  ````


--------------------------
`NumberedList.Item` (class)
--------------------------

Purpose
  This class represents an item in an numbered list.

Extends
  [topic: `OutlineSyntaxNodeContainer`]

Constructor arguments
  `children`: array of [topic: `OutlineSyntaxNode`]
    A collection of outline syntax nodes representing the content of this list item.

  `options` (optional)
    `ordinal`: number
      This field is described above.


--------------------------
`NumberedList.Order` (enum)
--------------------------

Purpose
  This enum represents the order of an numbered list.

Values
  - `Ascending` (default)
  - `Descending`


`Paragraph` (class)
===================

Writing convention
  [topic: Paragraphs]

Extends
  [topic: `InlineSyntaxNodeContainer`]

Implements
  [topic: `OutlineSyntaxNode`]

Constructor arguments
  `children`: array of [topic: `InlineSyntaxNode`]
    A collection of inline syntax nodes representing the content of this paragraph.

  `options` (optional)
    `sourceLineNumber`: number
      The line number of the line of markup that created this paragraph.

Rendered HTML
  ````
  <p>Hi there!</p>
  ````


`RevealableBlock` (class)
=========================

Writing convention
  [topic: Revealable blocks]

Extends
  [topic: `RichOutlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichOutlineSyntaxNode`].

Rendered HTML
  ````
  <div class="up-revealable">
    <input checked class="up-hide" id="up-hide-button-1" name="up-revealable-1" type="radio">
    <label for="up-hide-button-1" role="button" tabindex="0">hide</label>
    <input class="up-reveal" id="up-reveal-button-1" name="up-revealable-1" type="radio">
    <label for="up-reveal-button-1" role="button" tabindex="0">reveal</label>
    <div role="alert">
      <p>Ash fights Gary.</p>
    </div>
  </div>
  ````


`SectionLink` (class)
=====================

Writing convention
  [topic: Section links]

Implements
  [topic: `InlineSyntaxNode`]

Unique members
  `markupSnippetFromSectionTitle`: `string`
    This field is compared against the `titleMarkup` field of every table of contents entry to find the most appropriate match.

Constructor arguments
  `markupSnippetFromSectionTitle`: `string`
    This field is described above.

  `entry`: [topic: `Document.TableOfContents.Entry`]
    The table of contents entry (i.e. heading) this section link points to.

Rendered HTML
  When matched with a heading
    Up renders a link to that heading. The rendered link contains the heading's content.

    ````
    <a href="#up-topic-77">Using the Up library</a>
    ````

  When *not* matched with a heading
    Up renders the value of `markupSnippetFromSectionTitle` in italics.

    ````
    <i>Up library</i>
    ````


`SquareParenthetical` (class)
=============================

Writing convention
  [topic: Parenthetical text] produced by square brackets

Extends
  [topic: `ParentheticalSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `ParentheticalSyntaxNode`].

Rendered HTML
  ````
  <small class="up-parenthetical up-square-brackets">[Hi there!]</small>
  ````


`Stress` (class)
================

Writing convention
  [topic: Stress]

Extends
  [topic: `RichInlineSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `RichInlineSyntaxNode`].

Rendered HTML
  ````
  <strong>Hi there!</strong>
  ````


`Table` (class)
===============

Writing convention
  [topic: Tables]

Implements
  [topic: `OutlineSyntaxNode`]

Unique members
  `header`: [topic: `Table.Header`]
    The header row.

  `rows`: array of [topic: `Table.Row`]
    The content rows.

  `caption`: [topic: `Table.Caption`]
    The optional caption.

Constructor arguments
  `header`: [topic: `Table.Header`]
    This field is described above.

  `rows`: array of [topic: `Table.Row`]
    This field is described above.

  `caption`: [topic: `Table.Caption`]
    This field is described above.

  `options` (optional)
    `sourceLineNumber`: number
      The line number of the first line of markup that created this table.

Rendered HTML
  Without header column
    ````
    <table>
      <caption>Moves learned by the Pokémon Bulbasaur</caption>
      <tr>
        <th scope="col">Level</th>
        <th scope="col">Move</th>
        <th scope="col">Type</th>
        <th scope="col">Power</th>
        <th scope="col">Accuracy</th>
      </tr>
      <tr>
        <td class="up-numeric">1</td>
        <td>Tackle</td>
        <td>Normal</td>
        <td class="up-numeric">50</td>
        <td class="up-numeric">100%</td>
      </tr>
      <tr>
        <td class="up-numeric">3</td>
        <td>Growl</td>
        <td>Normal</td>
        <td></td>
        <td class="up-numeric">100%</td>
      </tr>
    </table>
    ````

  With header column
    ````
    <table>
      <caption>Moves learned by the Pokémon Bulbasaur</caption>
      <tr>
        <th scope="col"></th>
        <th scope="col">Level</th>
        <th scope="col">Type</th>
        <th scope="col">Power</th>
        <th scope="col">Accuracy</th>
      </tr>
      <tr>
        <th scope="row">Tackle</th>
        <td class="up-numeric">1</td>
        <td>Normal</td>
        <td class="up-numeric">50</td>
        <td class="up-numeric">100%</td>
      </tr>
      <tr>
        <th scope="row">Growl</th>
        <td class="up-numeric">3</td>
        <td>Normal</td>
        <td></td>
        <td class="up-numeric">100%</td>
      </tr>
    </table>
    ````


-----------------------
`Table.Caption` (class)
-----------------------

Purpose
  This class represents the caption of a table.

Extends
  [topic: `InlineSyntaxNodeContainer`]

Constructor arguments
  See the constructor arguments for [topic: `InlineSyntaxNodeContainer`].


--------------------
`Table.Cell` (class)
--------------------

Purpose
  This abstract class represents a table cell.

Extends
  [topic: `InlineSyntaxNodeContainer`]

Unique members
  `isNumeric` method
    Return type: `boolean`
      This method returns a `boolean` indicating whether the content of this cell is numeric.

    Arguments
      None.

Constructor arguments
  See the constructor arguments for [topic: `InlineSyntaxNodeContainer`].


----------------------
`Table.Header` (class)
----------------------

Purpose
  This class represents the header row of a table.

Unique members
  `cells`: array of [topic: `Table.Header.Cell`]
    The cells in this header row.

Constructor arguments
  `cells`: array of [topic: `Table.Header.Cell`]
    This field is described above.


`Table.Header.Cell` (class)
---------------------------

Purpose
  This class represents a table header cell.

Extends
  [topic: `Table.Cell`]

Constructor arguments
  See the constructor arguments for [topic: `InlineSyntaxNodeContainer`].


-------------------
`Table.Row` (class)
-------------------

Purpose
  This class represents a content row in a table.

Unique members
  `cells`: array of [topic: `Table.Row.Cell`]
    The content cells in this row.

  `headerColumnCell`: [topic: `Table.Header.Cell`]
    The single header column cell for this row, if there is one.

    Tables without header columns never have header column cells.

  `allCellsStartingWithHeaderColumnCell` method
    Return type: array of [topic: `Table.Cell`]
      This method returns every cell in this row.

      If the table has a header column, the row's `headerColumnCell` is the first item in the returned collection.

    Arguments
      None.

Constructor arguments
  `cells`: array of [topic: `Table.Row.Cell`]
    This field is described above.

  `headerColumnCell`: [topic: `Table.Header.Cell`]
    This field is described above.


`Table.Row.Cell` (class)
------------------------

Purpose
  This class represents a regular (non-header) table cell.

Extends
  [topic: `Table.Cell`]

Constructor arguments
  See the constructor arguments for [topic: `InlineSyntaxNodeContainer`].


`Text` (class)
==============

Purpose
  This class represents regular text content.

Implements
  [topic: `InlineSyntaxNode`]

Unique members
  `text`: `string`
    The text represented by this syntax node.

Constructor arguments
  `text`: `string`
    This field is described above.

Rendered HTML
  ````
  Yes, 1 &lt; 2
  ````


`ThematicBreak` (class)
=======================

Writing convention
  [topic: Thematic breaks]

Extends
  [topic: `OutlineSyntaxNode`]

Constructor arguments
  `options` (optional)
    `sourceLineNumber`: number
      The line number of the line of markup that created this thematic break.

Rendered HTML
  ````
  <hr>
  ````


`Video` (class)
===============

Writing convention
  [topic: Video]

Extends
  [topic: `MediaSyntaxNode`]

Constructor arguments
  See the constructor arguments for [topic: `MediaSyntaxNode`].

Rendered HTML
  ````
  <video controls src="https://i.imgur.com/32fBpnh.mp4" title="Professor Leonard">
    <a href="https://i.imgur.com/32fBpnh.mp4">Professor Leonard</a>
  </video>
  ````