######################################
Up (a markup language for web content)
######################################

Up is a [markup language] (wikipedia.org/wiki/Markup_language) that can be converted into HTML. This document is written in Up!

As a markup language, Up offers a set of (human-friendly) writing conventions for representing rich documents in plain text. To read more about those writing conventions, you can skip ahead to [topic: writing conventions].

If you're a software developer wondering how to incorporate Up into your next project, please see [topic: using the Up library].



===========
Why use Up?
===========

Up isn't the only markup language that can be converted into HTML. Why should you use Up?

- Readable, customizable keywords
  ===============================

  Too many markup languages devolve into a dense soup of symbols and punctuation.

  When a keyword would provide more clarity than a symbol, Up takes advantage of that! Many writing conventions, including [topic: tables] and [topic: revealable content], incorporate keywords.

  If you're a software developer, you can provide multiple custom variations for each keyword. For more information, see [topic: customizing keywords].

- A flexible, forgiving syntax
  ======================================

  * Up recognizes [topic: numbered lists] that count backwards.

    Markup
      ````
      3) Buy milk
      2) Buy bread
      #) Buy happiness
      ````

    Output
      3) Buy milk
      2) Buy bread
      #) Buy happiness

  * Up isn't picky about which brackets you use for [topic: links].

    Markup
      ````
      - Buy [milk] (wikipedia.org/wiki/Milk)
      - Buy (bread) [wikipedia.org/wiki/Bread]
      - Buy [sugar] [wikipedia.org/wiki/Sugar]
      - Buy (happiness) (wikipedia.org/wiki/Happiness)
      ````

    Output
      - Buy [milk] (wikipedia.org/wiki/Milk)
      - Buy (bread) [wikipedia.org/wiki/Bread]
      - Buy [sugar] [wikipedia.org/wiki/Sugar]
      - Buy (happiness) (wikipedia.org/wiki/Happiness)

  * Up ignores any [topic: excessive inflection].

    For example, you don't need to perfectly balance asterisks when stressing or emphasizing text.

    Markup
      ````
      I ***love****** asterisks!
      ````

    Output
      I ***love****** asterisks!

  * Up even supports [topic: overlapping].

    Markup
      ````
      I *enjoy [highlight: sleeping* late] whenever I can.
      ````

    Output
      I *enjoy [highlight: sleeping* late] whenever I can.

- Up produces fully accessible HTML
  =================================

   From the table of contents to the last movie-ruining spoiler, Up produces fully accessible HTML. This means people who have trouble viewing a screen or a using mouse can enjoy every document.



=================
Why *not* use Up?
=================

- YouÂ want a rich ecosystem of tools
  ==================================

  So far, there is only one [software library for Up] (npmjs.com/package/write-up), written and maintained by a [single person] (github.com/start).

  In contrast, [other markup languages] (duckduckgo.com/?q=markdown) have countless tools and plugins.

- You need speed
  ==============

  Up is not terribly slow, but it's not terribly fast, either---at least not yet. If you need instant, real-time parsing and rendering of large documents, Up isn't the right markup language for you.

- You want to embed HTML within your markup
  =========================================

  Some markup languages allow authors to embed HTML in their markup. Up does not.



############################
Writing conventions (syntax)
############################

Don't get lost! The following terms are occasionally used in this section:

Inline writing convention
  Any writing convention that can be used inside paragraphs. This includes [topic: emphasis] and [topic: highlighting].

Outline writing convention
  Any non-inline writing convention. This includes [topic: paragraphs] and [topic: tables].


==========
Paragraphs
==========

Paragraphs are the simplest writing convention in Up.

Example
  Markup
    ````
    Unlike regular dental floss, you can use floss picks even if you're not a trained dental hygienist.

    Floss picks are sold in stylish, resealable plastic bags. You have no excuse not to buy some today.
    ````

  Output
    Unlike regular dental floss, you can use floss picks even if you're not a trained dental hygienist.

    Floss picks are sold in stylish, resealable plastic bags. You have no excuse not to buy some today.

Discussion
  To produce a paragraph, write a line of text. That's all there is to it!

  Typically, paragraphs are separated by one or two blank lines. Three or more blank lines between paragraphs indicates a meaningful change of subject. For more information, see [topic: thematic breaks].

  On the other hand, *consecutive* non-blank lines produce [topic: line blocks], not consecutive paragraphs!


===========
Line blocks
===========

Use the line block convention for addresses, lyrics, or for anything that should be represented by *lines* instead of distinct [topic: paragraphs].

Example
  Markup
    ````
    Have you read my new poem?
    
    Roses are red
    Violets are blue
    Lyrics have lines
    And addresses do, too
    
    Poetry is just too easy.
    ````

  Output
    Have you read my new poem?
    
    Roses are red
    Violets are blue
    Lyrics have lines
    And addresses do, too
    
    Poetry is just too easy.

Discussion
  Consecutive non-blank lines produce a line block---unless those lines represent another convention, like [topic: numbered lists].

  Line blocks can contain any inline writing convention.


==========
Inflection
==========

Emphasis
========

Use the emphasis convention to emphasize a word or phrase.

If the reader should pronounce a word or phrase differently (e.g. to indicate contrast or sarcasm), consider emphasizing it.

Example
  Markup
    ````
    Only eat the *green* grapes. The red grapes are for Pikachu.
    ````

  Output
    Only eat the *green* grapes. The red grapes are for Pikachu.

Discussion
  To emphasize text, enclose it within single asterisks.

  Like most inline writing conventions, emphasis can be nested within itself.

  Markup
    ````
    John really, *really, *really** hates Red Delicious apples.
    ````

  Output
    John really, *really, *really** hates Red Delicious apples.


Stress
======

Use the stress convention to indicate a word or phrase is particularly important.

If the reader should raise their voice while reading a word or phrase, consider stressing it.

Example
  Markup
    ````
    Do **not** step on the dinosaur!
    ````

  Output
    Do **not** step on the dinosaur!

Discussion
  To stress text, enclose it within double asterisks.

  Like most inline writing conventions, stress can be nested within itself.

  Markup
    ````
    Remember to **stand **far** away** from that toaster. 
    ````

  Output
    Remember to **stand **far** away** from that toaster. 


Italics
=======

Use the italic convention to stylistically offset a word or phrase from the surrounding text. The titles of books and movies should probably be italicized.

Some authors also use italics for unfamiliar foreign words.

Example
  Markup
    ````
    My favorite video game is _Chrono Cross_.
    ````

  Output
    My favorite video game is _Chrono Cross_.

Discussion
  To italicize text, enclose it within single underscores.


Bold
====

If you want to make a word or phrase bold without conveying any extra importance, use the bold convention.

This convention should be used rarely. Usually, there's a more appropriate convention!

If you want to highlight text, see [topic: highlighting]. If you want to indicate the importance of a word of phrase, see [topic: stress].

Example
  Markup
    ````
    Has anyone actually used __KABOOM__ cleaning products?
    ````

  Output
    Has anyone actually used  __KABOOM__ cleaning products?

Discussion
  To make text bold, enclose it within double underscores.


Inline quotes
=============

Up automatically recognizes quoted text. You don't need to change how you use quotation marks.

If you want to quote more a few sentences, considering using [topic: blockquotes].

Example
  Markup
    ````
    "Only eat the green grapes," John said.
    ````

  Output
    "Only eat the green grapes," John said.

Discussion
  You already know how to use quotation marks! Just keep doing what you're doing.

  Like most inline writing conventions, inline quotes can be nested within themselves.

  Markup
    ````
    Bob replied, "Yesterday, Harvey yelled "I'll take the case!", but I doubt he will."
    ````

  Output
    Bob replied, "Yesterday, Harvey yelled "I'll take the case!", but I doubt he will."


Excessive inflection
====================

For all five inflection conventions, Up ignores any excessive delimiter characters.

Markup
  ````
  This is a """"great"""" pie.
  ````

Output
  This is a """"great"""" pie.

This includes when delimiter characters aren't perfectly balanced on either side.

Markup
  ````
  My favorite video game is _Chrono Cross__.
  ````

Output
  My favorite video game is _Chrono Cross__.


=====
Links
=====

You already know what a link is!

Example
  Markup
    ````
    The [Game Boy] (wikipedia.org/wiki/Game_Boy) was my first video game system.
    ````

  Output
    The [Game Boy] (wikipedia.org/wiki/Game_Boy) was my first video game system.

Discussion
  A link consists of two parts: content and a URL.

  To produce a link, simply enclose its content in square brackets or parentheses, then enclose its URL in square brackets or parentheses.

  You can use mix and match either type of bracket---they're totally interchangeable.

  Markup
    ````
    - Buy [milk] (wikipedia.org/wiki/Milk)
    - Buy (bread) [wikipedia.org/wiki/Bread]
    - Buy [sugar] [wikipedia.org/wiki/Sugar]
    - Buy (happiness) (wikipedia.org/wiki/Happiness)
    ````

  Output
    - Buy [milk] (wikipedia.org/wiki/Milk)
    - Buy (bread) [wikipedia.org/wiki/Bread]
    - Buy [sugar] [wikipedia.org/wiki/Sugar]
    - Buy (happiness) (wikipedia.org/wiki/Happiness)

  As demonstrated above, you can omit a link's [URL scheme] (wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax). If you do, Up assumes the link's URL scheme is `https://`.

  If you're a software developer using the Up library, you can specify a different default URL scheme. For more information, see [topic: defaultUrlScheme]. Other URL-related settings are:

  - [topic: baseForUrlsStartingWithSlash]
  - [topic: baseForUrlsStartingWithHashMark]
  - [topic: renderDangerousContent].


  URLs that don't look like URLs
  ==============================

  If Up suspects you aren't intending to produce a link, it won't produce one. For example, Up won't produce a link if the potential URL contains spaces.

  Markup
    ````
    Warlocked is the best game for GameBoy [sic] (other than PokÃ©mon).
    ````

  Output
    Warlocked is the best game for GameBoy [sic] (other than PokÃ©mon).

  To make it clear that you do intend to produce a link, omit the space between your link's content and its URL.

  Markup
    ````
    I love the [music](duckduckgo.com/?q=chrono cross music) for Chrono Cross.
    ````

  Output
    I love the [music](duckduckgo.com/?q=chrono cross music) for Chrono Cross.

  If you omit the space between your link's content and its URL, Up will **always** produce a link.

  These rules also apply when [topic: linkifying].


================================================
Parentheticals (parentheses and square brackets)
================================================

Up automatically recognizes parenthetical text!

You don't need to change how you use parentheses or square brackets.

Example
  Markup
    ````
    When I was ten years old, I left my home (in Pallet Town) to search for PokÃ©mon.
    ````

  Output
    When I was ten years old, I left my home (in Pallet Town) to search for PokÃ©mon.

Discussion
  You already know how to use parentheses and square brackets! Up understands that text enclosed within them represents supplemental, de-emphasized content.


============
Highlighting
============

Use the highlighting convention to indicate a word a phrase is particularly relevant to the reader.

Highlighted text is for drawing attention to text without altering its semantics. It should *not* be used to emphasize or stress text; if that's your purpose, see [topic: emphasis] or [topic: stress].

Example
  Markup
    ````
    Our cupcakes are vegan, [highlight: gluten-free], and made using only the most expensive ingredients.
    ````

  Output
    Our cupcakes are vegan, [highlight: gluten-free], and made using only the most expensive ingredients.

Discussion
  To highlight text, enclose it within square brackets or parentheses. Then, insert `highlight:` directly after your opening bracket.


=============
Example input
=============

Use the example input convention to represent user input, including:

- Keys the user should press
- Buttons the user should click
- Menu items the user should access

Example
  Markup
    ````
     Press {esc} to quit.
    ````

  Output
    Press {esc} to quit.

Discussion
  To indicate that text represents user input, enclose the text within curly brackets.

  Up ignores any spaces separating the curly brackets from the content they enclose.

  Markup
    ````
    Press { Start Game } when you are ready.
    ````
  Output
    Press { Start Game } when you are ready.

  Within example input, most writing conventions are ignored. However, [topic: typographical writing conventions] are recognized, as is [topic: disabling].


===========
Inline code
===========

Use the inline code convention to represent a small fragment of computer code.

If you need to represent more than a small fragment of computer code, use [topic: code blocks].

Example
  Markup
    ````
    In HTML, you probably shouldn't use the `<font>` element.
    ````

  Output
    In HTML, you probably shouldn't use the `<font>` element.

Discussion
  To indicate that text is a fragment of computer code, surround it with an equal number of backticks on either side.

  Within your inline code, text is treated literally. Only one inline writing convention is recognized: [topic: disabling].


  Including backticks in your inline code
  =======================================

  Within inline code, backticks can be escaped with a backslash.

  Markup
    ````
    `let output = \`score:\` + 5`
    ````

  Output
    `let output = \`score:\` + 5`

  Alternatively, inline code can also contain streaks of *unescaped* backticks that aren't exactly as long as the delimiters.

  In this example, the delimiters are **1** backtick long, so the inline code can contain streaks of **2** backticks:

  Markup
    ````
    `let output = ``score:`` + 5`
    ````

  Output
    `let output = ``score:`` + 5`

  In this example, the delimiters are **2** backticks long, so the inline code can contain "streaks" of **1** backtick:

  Markup
    ````
    ``let output = `score:` + 5``
    ````

  Output
    ``let output = `score:` + 5``

  ---------------------------------------------------
  But my inline code starts (or ends) with backticks!
  ---------------------------------------------------

  If your inline code starts or ends with backticks, place a single space between the offending backticks and the outer delimiter. This single space is trimmed away. Here's an example of inline code that both starts and ends with backticks:

  Markup
    ````
    `` `inline_code` ``
    ````

  Output
    `` `inline_code` ``

  Anything beyond that single space is preserved. If there are two spaces between the delimiter and the starting/ending backticks, only one is trimmed away.

  Furthermore, that single space is only trimmed away when it's used to separate a delimiter from backticks in your inline code. If a given "side" of inline code has any non-space characters between the delimiter and the first backtick, nothing gets trimmed from that side.

  Markup
    ````
    `` (`inline_code`) ``
    ````

  Output
    `` (`inline_code`) ``


========
Headings
========

Use the heading convention to introduce a new section in the document.

Example
  Markup
    ````
    Why I love breakfast cereal
    ===========================
    ````

  Output
    Why I love breakfast cereal
    ===========================

Discussion
  If text is underlined, it's treated as a heading. The underline can consist of any combination of the following characters:

  - Hyphens: `-`
  - Number signs: `#`
  - Equal signs: `=`
  - Plus signs: `+`
  - Tildes: `~`
  - Colons: `:`
  - Asterisks: `*`
  - At signs: `@`

  A heading's underline must be at least three characters long, but it does *not* need to be the same length as the text of the heading.

  Markup
    ````
    Why I hate bagels
    ===
    ````

  Output
    Why I hate bagels
    ===


  Heading levels
  ==============

  The first heading in a document is always a top-level heading. All subsequent headings with underlines consisting of the same characters are considered top-level.

  The first heading with a different combination of underline characters is considered a second-level heading. Unsurprisingly, all subsequent headings with underlines consisting of the same characters are also considered second-level.

  This process continues _ad infinitum_. Every new combination of heading underline characters introduces a new heading level. There is no limit to the number of heading levels in a document.


  Headings with "overlines"
  =========================

  A heading can have an optional "overline", but its overline must consist of the same combination of characters as its underline.

  Markup
    ````
    ---------------------------------
    Reasons never to own a pet parrot
    ---------------------------------
    ````

  Output
    ---------------------------------
    Reasons never to own a pet parrot
    ---------------------------------

  For the purpose of determining heading levels, a heading with an overline is always considered distinct from a heading without one, even if both headings use the same combination of underline characters.

  Therefore, a heading with an overline will never have the same level as a heading without an overline.


=============
Section links
=============

Use the section link convention to link another section (heading) in your document.

Example
  Markup
    ````
    Unlike many markup languages, Up recognizes [topic: parentheticals].
    ````

  Output
    Unlike many markup languages, Up recognizes [topic: parentheticals].

Discussion
  To produce a section link:

  1. Choose a snippet of text from the heading you want to link to
  2. Enclose the snippet within square brackets or parentheses
  3. Insert `topic:` or `section:` directly inside your opening bracket

  That's all it takes! Up automatically matches your snippet to the most appropriate heading, then produces a link for you.


  How does Up choose which heading matches your section link?
  ===========================================================

  Up tries to match your snippet to the first heading in the document whose text is an exact match with your snippet. If there isn't an exact match, Up will match your snippet to the first heading in the document whose text *contains* your snippet.

  ---------------------------------------
  Up ignores the heading's capitalization
  ---------------------------------------

  If your document has a heading whose text is "TOOTHPASTE", "Toothpaste" would be an exact match.

  Markup
    ````
    Please see [topic: toothpaste].

    TOOTHPASTE
    ----------

    Everyone should be excited about cleaning their teeth.
    ````

  Output
    Please see [topic: toothpaste].

    TOOTHPASTE
    ----------

    Everyone should be excited about cleaning their teeth.

  --------------------------------------------------------
  Up ignores any inline writing conventions in the heading
  --------------------------------------------------------

  If your document has a heading whose text is "Everyone *loves* toothpaste" (note the emphasis), "everyone loves toothpaste" would be an exact match.

  Markup
    ````
    Please see [topic: everyone loves toothpaste].

    Everyone *loves* toothpaste
    ---------------------------

    According to a recent survey, Americans prefer toothpaste to soda.
    ````

  Output
    Please see [topic: everyone loves toothpaste].

    Everyone *loves* toothpaste
    ---------------------------

    According to a recent survey, Americans prefer toothpaste to soda.


=========
Footnotes
=========

Use the footnote convention for asides or citations---anything you want to say without breaking the flow of a paragraph.

Footnotes are automatically extracted into blocks for you.

Example
  Markup
    ````
    PokÃ©mon Red begins in Pallet Town, [^ "Pallet" is probably a misspelling of "palette"] where Professor Oak gives Red his first PokÃ©mon.
    ````

  Output
    PokÃ©mon Red begins in Pallet Town, [^ "Pallet" is probably a misspelling of "palette"] where Professor Oak gives Red his first PokÃ©mon.

Discussion
  To produce a footnote, enclose its content within parentheses or square brackets. Then, insert a caret `^` directly after your opening bracket.

  Footnotes in a paragraph are replaced by superscripts containing the ordinal of the footnote within the document. These superscripts link to the actual content of the footnote in its footnote block.


================================
Media (images, audio, and video)
================================

Up allows you to include images, audio, or video in your document.

Example
  Markup
    ````
    [image: DuckDuckGo's logo] (duckduckgo.com/assets/dax-alt.svg)
    ````

  Output
    [image: DuckDuckGo's logo] (duckduckgo.com/assets/dax-alt.svg)

Discussion
  To include media in your document, simply enclose its description in square brackets or parentheses, then enclose its URL in square brackets or parentheses.

  You can use mix and match either type of bracket---they're totally interchangeable.


  Media descriptions
  ==================

  Media descriptions **always** start with `image:`, `audio:`, or `video:`, depending on the type of media you wish to include.

  Within media descriptions, [topic: typographical writing conventions] are recognized, as is [topic: disabling]. But other inline writing conventions are not recognized---you can't include revealable content or links, for example.


  Media URLs
  ==========

  As demonstrated above, you can omit the [URL scheme] (wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax) for media. If you do, Up assumes the URL scheme is `https://`.

  If you're a software developer using the Up library, you can specify a different default URL scheme. For more information, see [topic: defaultUrlScheme]. Other URL-related settings are:

  - [topic: baseForUrlsStartingWithSlash]
  - [topic: baseForUrlsStartingWithHashMark]
  - [topic: renderDangerousContent].


==================
Revealable content
==================

Sometimes, you want to give readers the option to avoid certain content. This includes:

- Movie spoilers
- Sexual content
- Graphic/disturbing content

To facilitate this, Up supports revealable content.


Inline revealables
==================

Use the inline revealable convention to hide content within a paragraph.

When you want to hide more than a sentence or two, use [topic: revealable blocks] instead.

Example
  Markup
    ````
    At the end of PokÃ©mon Red, [SPOILER: you battle your rival] before the credits roll.
    ````

  Output
    At the end of PokÃ©mon Red, [SPOILER: you battle your rival] before the credits roll.

Discussion
  To hide content within a paragraph, first enclose that content within square brackets or parentheses. Then, insert one of the [topic: revealable keywords] directly inside your opening bracket, followed by a colon.

  Inline revealables can contain any inline writing convention.


Revealable blocks
==================

Use revealable block convention to hide a block of content.

When you want to hide content within a paragraph, use [topic: inline revealables] instead.

Example
  Markup
    ````
    SPOILER:
      After defeating the Elite Four at the end of PokÃ©mon Red, you still have to battle your rival one last time.

      Your rival's specific lineup depends on the PokÃ©mon you selected at the beginning of the game. However, his first three PokÃ©mon are always the same:

      1. Pidgeot
      2. Alakazam
      3. Rhydon
    ````

  Output
    SPOILER:
      After defeating the Elite Four at the end of PokÃ©mon Red, you still have to battle your rival one last time.

      Your rival's specific lineup depends on the PokÃ©mon you selected at the beginning of the game. However, his first three PokÃ©mon are always the same:

      1. Pidgeot
      2. Alakazam
      3. Rhydon

Discussion
  To hide a block of content, first indent it two spaces (or a tab). Then, on the line before your indented block, put one of the [topic: revealable keywords].

  In the example above, the revealable keyword is followed by a colon. This isn't necessary.


Revealable keywords
===================

Both [topic: inline revealables] and [topic: revealable blocks] recognize any of the following keywords:

- `spoiler`
- `nsfw`
- `nsfl`
- `revealable`

Like all keywords in Up, you can capitalize these keywords however you want.


===========
Blockquotes
===========

Use the blockquote convention to quote a large section of text.

For typical dialog, you should probably use [topic: inline quotes] instead.

Example
  Markup
    ````
    > I hate oranges for the following reasons:
    >
    > 1. They're not apples.
    > 2. They're not bananas.
    ````

  Output
    > I hate oranges for the following reasons:
    >
    > 1. They're not apples.
    > 2. They're not bananas.

Discussion
  A blockquote consists of consecutive lines starting with `> ` (a greater-than symbol followed by a space). The space after the `>` is optional, but it's encouraged for readability.

  Blockquotes can contain any outline writing convention, including other blockquotes.

  Markup
    ````
    > Thank you for replying to my blog!
    >
    > > I hate oranges for the following reasons:
    > >
    > > 1. They're not apples.
    > > 2. They're not bananas.
    >
    > I completely understand.
    ````

  Output
    > Thank you for replying to my blog!
    >
    > > I hate oranges for the following reasons:
    > >
    > > 1. They're not apples.
    > > 2. They're not bananas.
    >
    > I completely understand.


=================
Description lists
=================

Use the description list convention to represent a collection of subjects and their descriptions.

You can use description lists for:

- Terms and definitions
- Questions and answers
- Any collection of subjects and descriptions!


Example
  Markup
    ````
    Kirby's Dreamland
      A video game about a flying marshmallow.

    Super Mario Land
      A video game about a jumping plumber.
    ````

  Output
    Kirby's Dreamland
      A video game about a flying marshmallow.

    Super Mario Land
      A video game about a jumping plumber.

Discussion
  Every item in a description list consists of two parts:

  1. One or more subjects
  2. A single description of those subjects


  Subjects
  ========

  Subjects can contain any inline writing convention.

  Markup
    ````
    Ash *Ketchum*
      A ten year-old PokÃ©mon trainer with an odd name.

    Gary "Smell You Later" Oak
      A ten year-old PokÃ©mon trainer with a keen nose.
    ````

  Output
    Ash *Ketchum*
      A ten year-old PokÃ©mon trainer with an odd name.

    Gary "Smell You Later" Oak
      A ten year-old PokÃ©mon trainer with a keen nose.

  When there is more than one subject for a given description, they should be listed consecutively, one per line.

  Markup
    ````
    Game Boy Light
    Game Boy Pocket
    Game Boy Color
      Handheld videogame systems released by Nintendo in the 1990s.
    ````

  Output
    Game Boy Light
    Game Boy Pocket
    Game Boy Color
      Handheld videogame systems released by Nintendo in the 1990s.


  Descriptions
  ============

  Each description follows the subjects it describes.

  Descriptions are indented 2 spaces (or a tab). They can contain any outline writing convention, including other description lists!

  Markup
    ````
    Bulbasaur
      A plant PokÃ©mon with a bulb growing from its back.

      Height
        0.7 m
      Weight
        6.9 kg

    Charmander
      A fire PokÃ©mon with a flame on its tail.

      Height
        0.6 m
      Weight
        8.5 kg

  Output
    Bulbasaur
      A plant PokÃ©mon with a bulb growing from its back.

      Height
        0.7 m
      Weight
        6.9 kg

    Charmander
      A fire PokÃ©mon with a flame on its tail.

      Height
        0.6 m
      Weight
        8.5 kg

  Each description may be followed by an optional blank line. If a description is followed by two blank lines, it marks the end of the description list.

  Markup
    ````
    Lime
      A green fruit.
    Strawberry
      A red fruit.


    Bulbasaur
      A green PokÃ©mon.
    Charmander
      A red PokÃ©mon.
    ````

  Output
    Lime
      A green fruit.
    Strawberry
      A red fruit.


    Bulbasaur
      A green PokÃ©mon.
    Charmander
      A red PokÃ©mon.


===============
Thematic breaks
===============

Use the thematic break convention to represent a change of subject.

A thematic break can be represented by 3 or more consecutive blank lines.

Markup
  ````
  I vowed never to eat apples again.



  By mid-March, a second flock of birds had moved into my dining room.
  ````

Output
  I vowed never to eat apples again.



  By mid-March, a second flock of birds had moved into my dining room.

A thematic break can *also* be represented by a line consisting of 3 or more of the following characters:

- Hyphens: `-`
- Number signs: `#`
- Equal signs: `=`
- Plus signs: `+`
- Tildes: `~`
- Colons: `:`
- Asterisks: `*`
- At signs: `@`

You can use any combination of those characters!

Markup
  ````
  I vowed never to eat apples again.

  =-=-=-=-=-=-=-=-=-=-=

  By mid-March, a second flock of birds had moved into my dining room.
  ````

Output
  I vowed never to eat apples again.

  =-=-=-=-=-=-=-=-=-=-=

  By mid-March, a second flock of birds had moved into my dining room.


===========
Code blocks
===========

Use the code block convention to represent a block of computer code.

If you need to reference only a small fragment of computer code, use [topic: Inline code].

Example
  Markup
    ````````
    ```
    function nthFibonacci(n: number): number {
      return (
        n <= 2
        ? n - 1
        : nthFibonacci(n - 1) + nthFibonacci(n - 2))
    }
    ```
    ````````

  Output
    ```
    function nthFibonacci(n: number): number {
      return (
        n <= 2
        ? n - 1
        : nthFibonacci(n - 1) + nthFibonacci(n - 2))
    }
    ```

Discussion
  Code blocks are surrounded (underlined and "overlined") by matching streaks of 3 or more backticks.

  If no matching end streak is found, the code block extends to the end of the document (or to the end of the current outline writing convention, if the code block is nested within one).

  Within a code block, indentation is preserved, and every single character is treated literally. No conventions are evaluated, which means [topic: disabling] is not supported.


  Including streaks of backticks within your code block
  =====================================================

  Code blocks can contain streaks of backticks that aren't exactly as long as the enclosing streaks.

  Markup
    `````````
    ``````
    A code block:

    ```
    function factorial(n: number): number {
      return (
        n <= 1
          ? 1
          : n * factorial(n - 1))
    }
    ```

    See? Not so hard!
    ``````
    `````````

  Output
    ``````
    A code block:

    ```
    function factorial(n: number): number {
      return (
        n <= 1
          ? 1
          : n * factorial(n - 1))
    }
    ```

    See? Not so hard!
    ``````


==============
Bulleted lists
==============

You already know what a bulleted list is!

Bulleted lists can contain any outline writing convention, including other bulleted lists.

Example
  Markup
    ````
    - Buy milk
    - Buy bread
    - Buy happiness
    ````

  Output
    - Buy milk
    - Buy bread
    - Buy happiness

Discussion
  Bullets
  =======

  Every bulleted list item starts with a bullet followed by a space. The following characters can serve as a bullet:

  - A hyphen: `-`
  - An asterisk: `*`
  - An actual bullet character: `â¢`


  Spacing between list items
  ===========================

  Each list item can be followed by a single blank line. This has no impact on the list itself.

  Markup
    ````
    - Buy milk

    - Buy bread

    - Buy happiness
    ````

  Output
    - Buy milk

    - Buy bread

    - Buy happiness

  On the other hand, if a list item is followed by 2 blank lines, it marks the end of the list.

  Markup
    ````
    - Buy milk
    - Buy bread


    - Fix squeaky cabinet
    - Fix self-esteem
    ````

  Output
    - Buy milk
    - Buy bread


    - Fix squeaky cabinet
    - Fix self-esteem


  List items consisting of multiple lines
  =======================================

  List items aren't limited to a single line!

  If your list item contains more than one line, subsequent lines should be indented 2 spaces (or a tab).

  Markup
    ````
    - Buy milk.

      If whole milk is on sale, buy that. Otherwise, buy 2%.

    - Buy bread.

      Only buy bread from one of the following brands:

      * Little Northern Bakehouse
      * Udi's
      * Canyon Bakehouse

    - Buy happiness.

      Don't spend more than a few cents on this.
    ````

  Output
    - Buy milk.

      If whole milk is on sale, buy that. Otherwise, buy 2%.

    - Buy bread.

      Only buy bread from one of the following brands:

      * Little Northern Bakehouse
      * Udi's
      * Canyon Bakehouse

    - Buy happiness.

      Don't spend more than a few cents on this. Not worth it.


==============
Numbered lists
==============

You already know what a numbered list is!

Numbered lists can contain any outline writing convention, including other numbered lists.

Example
  Markup
    ````
    1. Buy milk
    2. Buy bread
    3. Buy happiness
    ````

  Output
    1. Buy milk
    2. Buy bread
    3. Buy happiness

Discussion
  Numbered lists are nearly identical to [topic: bulleted lists]! The only difference is that numbered list items have ordinals, not bullets.

  The ordinal for a numbered list item can be expressed several ways:

  1. An integer followed by a period: `1.`
  2. An integer followed by a closing parenthesis: `1)`
  3. A number sign: `#`
  4. A number sign followed by a period: `#.`
  5. A number sign followed by a closing parenthesis: `#)`

  Like each bullet in a bulleted list, each ordinal in a numbered list must be followed by a space.


  Lists starting at a specific number
  ===================================

  Numbered lists don't have to start at `1`.

  Markup
    ````
    3) March
    #) April
    #) May
    ````

  Output
    3) March
    #) April
    #) May


  Lists in descending order
  =========================

  Up automatically recognizes when a numbered list is in descending order.

  If a numered list has at least two items with *integer* ordinals (as opposed to number signs), and if the first two of those integers are in descending order, Up considers the list to be in descending order.

  Markup
    ````
    3) Buy milk
    2) Buy bread
    #) Buy happiness
    ````

  Output
    3) Buy milk
    2) Buy bread
    #) Buy happiness


  Single-item numbered lists
  ==========================

  Like bulleted lists, numbered lists can consist of a single item.

  Markup
    ````
    1) Buy milk
    ````

  Output
    1) Buy milk

  There's a small exception to this rule: If your list item's ordinal is expressed as an integer followed by a period (e.g. `1.`), you must have more than one list item. This exception helps prevent "accidental" numbered lists.

  Markup
    ````
    1783. Not a good year for Great Britain.
    ````

  Output
    1783. Not a good year for Great Britain.


=================================
Typographical writing conventions
=================================

Consecutive periods represent an ellipsis, so Up replaces them with a fancy ellipsis character.

Markup
  ````
  I don't know... I doubt a dog would do this.
  ````

Output
  I don't know... I doubt a dog would do this.

If you're a software developer using the Up library, you can specify a different fancy ellipsis (e.g. `â¯`). For more information, see [topic: fancyEllipsis].

Two consecutive hyphens produce an en dash.

Markup
  ````
  I agree -- to a extent -- with your plan to eat nothing but cereal.
  ````

Output
  I agree -- to a extent -- with your plan to eat nothing but cereal.

Three consecutive hyphens produce an *em* dash.

Markup
  ````
  Use a spoon---a fork won't cut it.
  ````

Output
  Use a spoon---a fork won't cut it.


======
Tables
======

You already know what a table is! Use the table convention to display rows of data organized into columns.

Example
  Markup
    ````
    Table: Moves learned by the PokÃ©mon Bulbasaur

    Title;  Move;         Type;     Power;  Accuracy

    1;      Tackle;       Normal;   50;     100%
    3;      Growl;        Normal;   ;       100%
    7;      Leech Seed;   Grass;    ;       90%
    9;      Vine Whip;    Grass;    45;     100%
    ````

  Output
    Table: Moves learned by the PokÃ©mon Bulbasaur

    Level;  Move;         Type;     Power;  Accuracy

    1;      Tackle;       Normal;   50;     100%
    3;      Growl;        Normal;   ;       100%
    7;      Leech Seed;   Grass;    ;       90%
    9;      Vine Whip;    Grass;    45;     100%

Discussion

  A table consists of:

  - An optional caption, representing the table's title
  - A header row, describing each column
  - Content rows, representing the actual data
  - An optional header column, describing each row

  Table cells are separated by semicolons. For more information, see [topic: cells].

  Our examples use extra spaces to align cells. This makes our markup more readable, but it's strictly optional! If you want, you can squish your cells together, as long as any empty cells contain at least one space. For more information, please see [topic: empty cells].

  Squished markup
    ````
    Table: My favorite fruits

    Fruit;Color;Taste

    Lime;Green;Sour
    Lemon;Yellow;Sour
    Banana;Yellow;Sweet
    ````

  Output
    Table: My favorite fruits

    Fruit;Color;Taste

    Lime;Green;Sour
    Lemon;Yellow;Sour
    Banana;Yellow;Sweet


  The caption
  ===========

  Tables start with a caption. Captions can contain any inline writing convention.

  Markup
    ````
    Table: My *least* favorite fruits

    Fruit;      Color;      Taste

    Lime;       Green;      Sour
    Lemon;      Yellow;     Sour
    Banana;     Yellow;     Sweet
    ````

  Output
    Table: My *least* favorite fruits

    Fruit;      Color;      Taste

    Lime;       Green;      Sour
    Lemon;      Yellow;     Sour
    Banana;     Yellow;     Sweet

  Captions are strongly encouraged, but they're not required. To create a table without a caption, simply put "Table" on its own line.

  Markup
    ````
    Table

    Level;  Move;         Type;     Power;  Accuracy

    1;      Tackle;       Normal;   50;     100%
    3;      Growl;        Normal;   ;       100%
    7;      Leech Seed;   Grass;    ;       90%
    9;      Vine Whip;    Grass;    45;     100%
    ````

  Output
    Table

    Level;  Move;         Type;     Power;  Accuracy

    1;      Tackle;       Normal;   50;     100%
    3;      Growl;        Normal;   ;       100%
    7;      Leech Seed;   Grass;    ;       90%
    9;      Vine Whip;    Grass;    45;     100%


  Cells
  =====

  Cells are separated by semicolons. If you want to include a semicolon in a cell, simply put a backslash before it. For more information, see [topic: disabling the special meaning of characters].

  Markup
    ````
    Table: My favorite fruits

    Fruit;      Reason for liking

    Apples;     Easy to eat\; lasts weeks in the fridge
    Grapes;     Make me feel like Dionysus
    Oranges;    The color orange is nice
    ````

  Output
    Table: My favorite fruits

    Fruit;      Reason for liking

    Apples;     Easy to eat\; lasts weeks in the fridge
    Grapes;     Make me feel like Dionysus
    Oranges;    The color orange is nice

  -------------------------------
  Cells spanning multiple columns
  -------------------------------

  If you want a cell to span two columns, terminate that cell with two semicolons.

  Markup
    ````
    Table: My favorite fruits

    Fruit;      Color;      Taste

    Lime;       Green;      Sour
    Orange;;                Sweet and tart
    Banana;     Yellow;     Sweet
    ````

  Output
    Table: My favorite fruits

    Fruit;      Color;      Taste

    Lime;       Green;      Sour
    Orange;;                Sweet and tart
    Banana;     Yellow;     Sweet

  Likewise, if you want a cell to span six columns, terminate that cell with six semicolons.

  -----------
  Empty cells
  -----------

  A cell consisting solely of spaces (one or more) is considered empty.

  Normally, you have to put at least one space in the cell, because consecutive semicolons indicate that you want the previous cell to span multiple columns.

  However, to indicate that the *first* cell in a row should be empty, simply start that row with a semicolon. You don't need to put any spaces before it.

  Markup
    ````
    Table: Games in the Chrono series

    Release Date;       Game;

    March 11, 1995;     Chrono Trigger
    November 18, 1999;  Chrono Cross
    ;                   Chrono Break
    ````

  Output
    Table: Games in the Chrono series

    Game;               Release Date

    Chrono Trigger;     March 11, 1995
    Chrono Cross;       November 18, 1999
    Chrono Break;

  Likewise, to indicate that the *last* cell in a row should be empty, simply end that row with a semicolon. You don't need to add any spaces after it.

  Markup
    ````
    Table: Games in the Chrono series

    Game;               Release Date

    Chrono Trigger;     March 11, 1995
    Chrono Cross;       November 18, 1999
    Chrono Break;
    ````

  Output
    Table: Games in the Chrono series

    Game;               Release Date

    Chrono Trigger;     March 11, 1995
    Chrono Cross;       November 18, 1999
    Chrono Break;


  The header row
  ==============

  The header defines each column in the table.

  The single blank lines before and after the header are not required.

  Markup
    ````
    Table: Moves learned by the PokÃ©mon Bulbasaur
    Level;  Move;         Type;     Power;  Accuracy
    1;      Tackle;       Normal;   50;     100%
    3;      Growl;        Normal;   ;       100%
    7;      Leech Seed;   Grass;    ;       90%
    9;      Vine Whip;    Grass;    45;     100%
    ````

  Output
    Table: Moves learned by the PokÃ©mon Bulbasaur
    Level;  Move;         Type;     Power;  Accuracy
    1;      Tackle;       Normal;   50;     100%
    3;      Growl;        Normal;   ;       100%
    7;      Leech Seed;   Grass;    ;       90%
    9;      Vine Whip;    Grass;    45;     100%

  Cells in a table's header can contain any inline writing convention.


  Content rows
  ============

  The "content rows" of a table follow its header row. The content rows contain the table's actual data.

  If a content row is followed by a blank line, it ends the table.

  Markup
    ````
    Table: Moves learned by the PokÃ©mon Bulbasaur

    Level;  Move;         Type;     Power;  Accuracy

    1;      Tackle;       Normal;   50;     100%
    3;      Growl;        Normal;   ;       100%
    7;      Leech Seed;   Grass;    ;       90%
    9;      Vine Whip;    Grass;    45;     100%

    With moves *that* exciting, I had to choose Bulbasaur!

    ````

  Output
    Table: Moves learned by the PokÃ©mon Bulbasaur

    Level;  Move;         Type;     Power;  Accuracy

    1;      Tackle;       Normal;   50;     100%
    3;      Growl;        Normal;   ;       100%
    7;      Leech Seed;   Grass;    ;       90%
    9;      Vine Whip;    Grass;    45;     100%

    With moves *that* exciting, I had to choose Bulbasaur!

  Content row cells can contain any inline writing convention.


  Including a header column in your table
  =======================================

  To indicate your table has a header column, simply indent the header *row* at least two spaces (or a tab)! The first cell in each row is treated as its header column.

  Markup
    ````
    Table: Moves learned by the PokÃ©mon Bulbasaur

                  Level;    Type;     Power;  Accuracy

    Tackle;       1;        Normal;   50;     100%
    Growl;        3;        Normal;   ;       100%
    Leech Seed;   7;        Grass;    ;       90%
    Vine Whip;    9;        Grass;    45;     100%
    ````

  Output
    Table: Moves learned by the PokÃ©mon Bulbasaur

                  Level;    Type;     Power;  Accuracy

    Tackle;       1;        Normal;   50;     100%
    Growl;        3;        Normal;   ;       100%
    Leech Seed;   7;        Grass;    ;       90%
    Vine Whip;    9;        Grass;    45;     100%


When your table has a header column, Up automatically inserts an extra blank cell at the beginning of the header row in the top level corner, above the header column.


=====================================
Linkifying another writing convention
=====================================

You can put [topic: images] inside of [topic: links]. However, the syntax can be a bit messy.

Messy markup
  ````
  [(image: DuckDuckGo's logo) (duckduckgo.com/assets/dax-alt.svg)] [duckduckgo.com]
  ````

Output
  [(image: DuckDuckGo's logo) (duckduckgo.com/assets/dax-alt.svg)] [duckduckgo.com]

That's a lot of brackets! Luckily, there's a shortcut.

Simply place the "linkifying" URL after the image's own URL, and Up will produce a link for you.

Cleaner markup
  ````
  [image: DuckDuckGo's logo] [duckduckgo.com/assets/dax-alt.svg] (duckduckgo.com)
  ````

Output
  [image: DuckDuckGo's logo] [duckduckgo.com/assets/dax-alt.svg] (duckduckgo.com)

This shortcut also works for the following conventions:

- [topic: Highlighting]
- [topic: Example input]
- [topic: Footnotes]
- [topic: Inline revealables]

Markup
  ````
  At the end of PokÃ©mon Red, [SPOILER: you battle your rival] (pokemon.wikia.com/wiki/Rival) before the credits roll.
  ````

Output
  At the end of PokÃ©mon Red, [SPOILER: you battle your rival] (pokemon.wikia.com/wiki/Rival) before the credits roll.


======================================
Overlapping inline writing conventions
======================================

In Up, inline writing conventions can freely overlap.

Markup
  ````
  I *enjoy [highlight: sleeping* late] whenever I can.
  ````

Output
  I *enjoy [highlight: sleeping* late] whenever I can.


Superficial overlapping
=======================

If conventions overlap superficially---only by their start or end delimiters---Up pretends they weren't overlapped at all.

Markup
  ````
  At the very end of PokÃ©mon Red, [SPOILER: you must battle your rival *yet again]* before the credits roll.
  ````

Output
  At the very end of PokÃ©mon Red, [SPOILER: you must battle your rival *yet again]* before the credits roll.


===========================================
Disabling the special meaning of characters
===========================================

To disable the special meaning of a character, put a backslash before it.

Example
  ````
  I love \*asterisks*!
  ````

Output
  I love \*asterisks\*!

Likewise, to disable the special meaning of a backslash, put another backslash before it.

Example
  ````
  My favorite kind of slash is the backslash: \\. What is yours?
  ````

Output
  My favorite kind of slash is the backslash: \\. What is yours?



####################
Using the Up library
####################

The Up library can be [found on NPM] (npmjs.com/package/write-up).


============
Installation
============

````
npm install write-up --save-dev
````


==============
Usage Overview
==============

First, `require` the library.

````
const Up = require('write-up')
````

Hooray! `Up` now serves as the namespace for the library.

Typically, you'll want to use the various functions within that namespace, such as [topic: Up.parseAndRender].

````
const html = Up.parseAndRender(markup, settings)
````

For a full description of the functions you can use, please see [topic: functions].

Alternatively, you can create an instance of the `Up.Transformer` class. This can be useful if you need to parse or render several documents all sharing custom settings. For more information, see [topic: Up.Transformer].


=========
Functions
=========

`Up.parseAndRender`
==================

This method converts Up markup into HTML and returns the result.

Arguments
  `markup`: `string`
    The Up markup to convert into HTML.
  `settings` (optional): [topic: Up.UserProvidedSettings]
    The custom parsing and/or rendering settings to apply.

Return type: `string`
  This method returns HTML representing the rendered document.

Usage
  Without custom settings
    ````
    const html = Up.parseAndRender(markup)
    ````

  With custom settings
    ````
    const html = Up.parseAndRender(markup, {
      parsing: {
        createSourceMap: true,
        keywords: { highlight: "mark" }
      },
      rendering: {
        idPrefix: "article"
      }
    })
    ````


`Up.parseAndRenderDocumentAndTableOfContents`
=============================================

This method converts Up markup into two pieces of HTML, both of which are returned:

1. A table of contents
2. The document itself

Arguments
  `markup`: `string`
    The Up markup to parse and render.
  `settings` (optional): [topic: Up.UserProvidedSettings]
    The custom parsing and/or rendering settings to apply.

Return type: [topic: Up.RenderedDocumentAndTableOfContents]
  This method returns HTML representing the rendered document and table of contents.

Usage
  Without custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      Up.parseAndRenderDocumentAndTableOfContents(markup)
    ````

  With custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      Up.parseAndRenderDocumentAndTableOfContents(markup, {
        parsing: {
          createSourceMap: true,
          keywords: { highlight: "mark" }
        },
        rendering: {
          idPrefix: "article",
          terms: { tableOfContents: "In This Article" }
        }
      })
    ````


`Up.parseAndRenderInline`
=========================

This method converts inline Up markup into inline HTML and returns the result.

For more information about inline documents, see [topic: inline documents].

Arguments
  `inlineMarkup`: `string`
    The inline Up markup to convert into inline HTML.
  `parsingSettings` (optional): [topic: Up.UserProvidedSettings]
    The custom parsing and/or rendering settings to apply.

Return type: `string`
  This method returns HTML representing the rendered inline document.

Usage
  Without custom settings
    ````
    const html = Up.parseAndRenderInline(markup)
    ````

  With custom settings
    ````
    const html = Up.parseAndRenderInline(markup, {
      parsing: {
        baseForUrlsStartingWithSlash: "https://example.com/en-us",
        keywords: { highlight: "mark" }
      },
      rendering: {
        idPrefix: "byline",
        terms: {
          footnoteReference: "footnote mention",
          revealContent: "show"
        }
      }
    })
    ````


`Up.parse`
==========

This method parses Up markup and returns the resulting syntax tree.

Arguments
  `markup`: `string`
    The Up markup to parse.

  `parsingSettings` (optional): [topic: Up.UserProvidedSettings.Parsing]
    The custom parsing settings to apply.

Return type: [topic: Document]
  This method returns a syntax tree representing the parsed document.

Usage
  Without custom settings
    ````
    const html = Up.parse(markup)
    ````

  With custom settings
    ````
    const document = Up.parse(markup, {
      createSourceMap: true,
      keywords: { highlight: "mark" }
    })
    ````


`Up.parseInline`
================

This method parses inline Up markup and returns the resulting inline syntax tree.

For more information about inline documents, see [topic: inline documents].

Arguments
  `inlineMarkup`: `string`
    The inline Up markup to parse.

  `parsingSettings` (optional): [topic: Up.UserProvidedSettings.Parsing]
    The custom parsing settings to apply.

Return type: [topic: Up.InlineDocument]
  This method returns an inline syntax tree representing the parsed document.

Usage
  Without custom settings
    ````
    const html = Up.parseInline(markup)
    ````

  With custom settings
    ````
    const html = Up.parseInline(markup, {
      baseForUrlsStartingWithSlash: "https://example.com/en-us",
      keywords: { highlight: "mark" }
    })
    ````


`Up.render`
===========

This method converts a syntax tree into HTML and returns the result.

Arguments
  `document`: [topic: Document]
    The syntax tree to convert into HTML.

  `renderingSettings` (optional): [topic: Up.UserProvidedSettings.Rendering]
    The custom rendering settings to apply.

Return type: `string`
  This method returns HTML representing the rendered document.

Usage
  Without custom settings
    ````
    const html = Up.render(document)
    ````

  With custom settings
    ````
    const html = Up.render(document, {
      idPrefix: "article",
      terms: {
        footnoteReference: "footnote mention",
        revealContent: "show"
      }
    })
    ````


`Up.renderDocumentAndTableOfContents`
=====================================

This method converts a syntax tree into two pieces of HTML, both of which are returned:

1. A table of contents
2. The document itself

Arguments
  `document`: [topic: Document]
    The syntax tree to convert into HTML.

  `renderingSettings` (optional): [topic: Up.UserProvidedSettings.Rendering]
    The custom rendering settings to apply.

Return type: [topic: Up.RenderedDocumentAndTableOfContents]
  This method returns HTML representing the rendered document and table of contents.

Usage
  Without custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      Up.renderDocumentAndTableOfContents(document)
    ````

  With custom settings
    ````
    const { tableOfContentsHtml, documentHtml } =
      Up.renderDocumentAndTableOfContents(document, {
        idPrefix: "article",
        terms: { tableOfContents: "In This Article" }
      })
    ````


`Up.renderInline`
================

This method converts an inline syntax tree into inline HTML and returns the result.

For more information about inline documents, see [topic: inline documents].

Arguments
  `inlineDocument`: [topic: Up.InlineDocument]
    The inline syntax tree to convert into HTML.

  `renderingSettings` (optional): [topic: Up.UserProvidedSettings.Rendering]
    The custom rendering settings to apply.

Return type: `string`
  This method returns HTML representing the rendered inline document.

Usage
  Without custom settings
    ````
    const html = Up.renderInline(inlineDocument)
    ````

  With custom settings
    ````
    const html = Up.renderInline(inlineDocument, {
      idPrefix: "byline",
      terms: {
        footnoteReference: "footnote mention",
        revealContent: "show"
      }
    })
    ````


=======================================
`Up.RenderedDocumentAndTableOfContents`
=======================================

This interface represents the HTML for a rendered document and table of contents.

Members
  `tableOfContentsHtml`: `string`
    The HTML for the table of contents.

  `documentHtml`: `string`
    The HTML for the document itself.

Notes
  The following functions return an object satisfying this interface:

  - [topic: Up.parseAndRenderDocumentAndTableOfContents]
  - [topic: Up.renderDocumentAndTableOfContents]
  


=============
Configuration
=============

All functions accept custom settings!

For a full description of Up's functions, see [topic: functions].


`Up.UserProvidedSettings`
======================

Summary
  The `UserProvidedSettings` interface includes both parsing settings and rendering settings.

  Use this interface to provide custom settings to functions that both parse markup *and* render the result to HTML:

  - [topic: Up.parseAndRender]
  - [topic: Up.parseAndRenderDocumentAndTableOfContents]
  - [topic: Up.parseAndRenderInline]

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      createSourceMap: true,
      keywords: { highlight: "mark" }
    },
    rendering: {
      idPrefix: "article"
    }
  })
  ````

Members (both of which are optional)
  `parsing`: [topic: Up.UserProvidedSettings.Parsing]
    The custom parsing settings to apply.

  `rendering`: [topic: Up.UserProvidedSettings.Rendering]
    The custom rendering settings to apply.


`Up.UserProvidedSettings.Parsing`
=================================

Summary
  The `UserProvidedSettings.Parsing` interface includes all parsing settings.

  Use this interface to provide custom settings to functions that parse markup and return the resulting syntax tree:

  - [topic: Up.parse]
  - [topic: Up.parseInline]

  As part of [topic: Up.UserProvidedSettings], this interface also provides custom settings to functions that both parse markup *and* render the result to HTML:

  - [topic: Up.parseAndRender]
  - [topic: Up.parseAndRenderDocumentAndTableOfContents]
  - [topic: Up.parseAndRenderInline]

Usage
  ````
  const document = Up.parse(markup, {
    createSourceMap: true,
    keywords: {
      audio: ["sound", "song"],
      highlight: "mark"
    }
  })
  ````

Members (all of which are optional)
  [topic: createSourceMap]: `boolean`
    Enables source mapping.

  [topic: defaultUrlScheme]: `string`
    The default URL scheme for URLs without one.

  [topic: baseForUrlsStartingWithSlash]: `string`
    The base for URLs starting with `/`.

  [topic: baseForUrlsStartingWithHashMark]: `string`
    The base for URLs starting with `#`.

  [topic: fancyEllipsis]: `string`
    Up replaces consecutive periods with this fancy ellipsis.

  `keywords` (all of which are optional)

    --------------------
    Customizing keywords
    --------------------

    You can provide unlimited custom variations for each keyword. Custom keyword variations do not overwrite the default keywords.

    ````
    const document = Up.parse(markup, {
      keywords: {
        audio: ["sound", "song"],
        highlight: "mark"
      }
    })
    ````

    Like the default keywords, any custom keyword variations are case-insensitive.

    `audio`: `string` or `string[]`
      Recognized by [topic: audio].

    `highlight`: `string` or `string[]`
      Recognized by [topic: highlighting].

    `image`: `string` or `string[]`
      Recognized by [topic: images].

    `revealable`: `string` or `string[]`
      Recognized by [topic: inline revealables] and [topic: revealable blocks].

    `sectionLink`: `string` or `string[]`
      Recognized by [topic: section links].

    `table`: `string` or `string[]`
      Recognized by [topic: tables].

    `video`: `string` or `string[]`
      Recognized by [topic: video].


-----------------
`createSourceMap`
-----------------

Summary
  When `createSourceMap` is enabled, Up keeps track of the original line number for every instance of every outline writing convention.

  This document uses source mapping to synchronize the scrolling between itself and its markup.

Default
  `false`

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      createSourceMap: true
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing].

Details
  `createSourceMap` works by setting the `sourceLineNumber` of each `OutlineSyntaxNode`. Source line numbers start at `1`, not `0`.

  When these syntax nodes are rendered to HTML, the HTML elements they produce each have a `data-up-source-line` attribute set the appropriate line number.


------------------
`defaultUrlScheme`
------------------

Summary
  The `defaultUrlScheme` is prefixed to any link URL or media URL without a [URL scheme] (wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax).

  For URLs *with* a URL scheme, this setting has no effect. Furthermore, this setting is not applied to URLs that start with `/` or `#`. For those URLs, see [topic: baseForUrlsStartingWithSlash] or [topic: baseForUrlsStartingWithHashMark].

Default
  `"https://"`

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      defaultUrlScheme: "my-app://"
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing].


------------------------------
`baseForUrlsStartingWithSlash`
------------------------------

Summary
  The `baseForUrlsStartingWithSlash` is prefixed to any link URL or media URL starting with `/`.

Default
  `""` (an empty string)

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      baseForUrlsStartingWithSlash: "https://example.com/blog/"
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing].


---------------------------------
`baseForUrlsStartingWithHashMark`
---------------------------------

Summary
  The `baseForUrlsStartingWithSlash` is prefixed to any link URL or media URL starting with `#`.

Default
  `""` (an empty string)

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      baseForUrlsStartingWithHashMark: "https://example.com/blog/post/28"
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing].


---------------
`fancyEllipsis`
---------------

Summary
  Up automatically replaces consecutive periods with `fancyEllipsis`.

  By default, `fancyEllipsis` is `â¦`. If you you want Up to use a different fancy ellipsis (e.g. `â¯` or even `. . .`), set `fancyEllipsis` accordingly.

Default
  `"â¦"`

Usage
  ````
  const html = Up.parseAndRender(markup, {
    parsing: {
      fancyEllipsis: "â¯"
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Parsing].


`Up.UserProvidedSettings.Rendering`
===================================

Summary
  The `UserProvidedSettings.Parsing` interface includes all rendering settings.

  Use this interface to provide custom settings to functions that render syntax trees to HTML:

  - [topic: Up.render]
  - [topic: Up.renderDocumentAndTableOfContents]
  - [topic: Up.renderInline]

  As part of [topic: Up.UserProvidedSettings], this interface also provides custom settings to functions that both parse markup *and* render the result to HTML:

  - [topic: Up.parseAndRender]
  - [topic: Up.parseAndRenderDocumentAndTableOfContents]
  - [topic: Up.parseAndRenderInline]

Usage
  ````
  const html = Up.render(document, {
    idPrefix: "article",
    terms: {
      footnoteReference: "footnote mention",
      revealContent: "show"
    }
  })
  ````

Members (all of which are optional)
  [topic: idPrefix]: `string`
    The prefix to apply to HTML IDs.

  [topic: renderDangerousContent]: `boolean`
    Enables the rendering of dangerous content. Enabling this setting is not recommended!

  `terms` (all of which are optional)
    `footnote`: `string`
      Appears in the URLs of footnotes definitions (i.e. in their respective footnote blocks).

    `footnoteReference`: `string`
      Appears in the URLs of footnotes references (i.e. the superscripts within paragraphs).

    `revealContent`: `string`
      Appears on the button that toggles the visibility of revealable content.

    `sectionReferencedByTableOfContents`: `string`
      Appears in the URLs of headings referenced by the table of contents.

    `tableOfContents`: `string`
      Appears at the top of the table of contents.

    You don't need to worry about escaping any characters in your custom terms! Up handles that for you.


----------
`idPrefix`
----------

Summary
  If you are rendering multiple documents onto the same page, you need to use this setting to prevent HTML ID collisions between documents.

  By default, `idPrefix` is `up` to prevent ID collisions any HTML elements *not* rendered by Up. If you don't want any ID prefix, you can set `idPrefix` to an empty string.

Usage
  ````
  const html = Up.parseAndRender(markup, {
    rendering: {
      idPrefix: "article"
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Rendering].

Details
  You don't need to worry about escaping HTML for your `idPrefix`---Up automatically handles that for you. Furthermore, Up automatically converts any spaces in your `idPrefix` to hyphens.

Default
  `"up"`


------------------------
`renderDangerousContent`
------------------------

Summary
  Normally, Up will not render links or media elements with potentially exploitable URI schemes (`javascript`, `vbscript`, `data`, and `file`).

  When this setting is enabled, Up will dutifully render all links and media elements.

Usage
  ````
  const html = Up.parseAndRender(markup, {
    rendering: {
      renderDangerousContent: true
    }
  })
  ````

Context
  This setting belongs to [topic: Up.UserProvidedSettings.Rendering].

Details
  By default, dangerous media elements produce no HTML at all. Dangerous links produce no HTML of their own, though their child elements are rendered.

Default
  `false`



================
Inline documents
================

In certain contexts, you might want to restrict a document to just a single line:

- An online chat message
- The title of a thread on a message board
- The byline for a user's profile

That's what inline documents are for! To take advantage of inline documents, use one of the following functions:

- [topic: Up.parseAndRenderInline]
- [topic: Up.parseInline]
- [topic: Up.renderInline]


Syntax differences
==================

Within inline documents, Up ignores all outline writing conventions. Furthermore, [topic: footnotes] and [topic: section links] aren't supported.

When Up encounters a footnote in an inline document, it pretends the author had used parentheses instead of a footnote.

Inline markup
  ````
  My dad [^ Professor Oak] is very wise.
  ````
Output
  My dad (Professor Oak) is very wise.

Within inline documents, Up doesn't recognize the syntax for section links. Consequently, their markup is instead treated as regular old text enclosed within brackets.

Inline markup
  ````
  I enjoyed our conversation [topic: the weather].
  ````
Output
  I enjoyed our conversation [\topic: the weather].


Rendered HTML
=============

When inline documents are rendered, the resulting HTML is *not* enclosed within any container element (e.g. `<p>`).

Inline markup
  I *really* like Starcraft.

Rendered inline HTML
  ````
  I <em>really</em> like Starcraft.
  ````



================
`Up.Transformer`
================

Purpose
  The `Up.Transformer` class can be useful if you need to parse or render several documents all sharing custom settings.

  Those shared settings can be provided just once---in the constructor. Then, when calling methods on your object, you only need to provide settings that overwrite (or supplement) the ones you provided to the constructor.

  ````
  const up = new Up.Transformer(settings)
  const html = up.parseAndRender(markup, settingsChanges)
  ````

Constructor arguments
  `settings` (optional): [topic: Up.UserProvidedSettings]
    The custom parsing and/or rendering settings to apply for all subsequent method calls.

Members
  This class's methods have the same names and arguments as the [topic: functions] in the library:

  - [topic: Up.parseAndRender]
  - [topic: Up.parseAndRenderDocumentAndTableOfContents]
  - [topic: Up.parseAndRenderInline]
  - [topic: Up.parse]
  - [topic: Up.parseInline]
  - [topic: Up.render]
  - [topic: Up.renderDocumentAndTableOfContents]
  - [topic: Up.renderInline]

  When a method is invoked with custom settings, those settings are merged with the settings provided to the constructor. If any individual settings conflict, Up uses the conflicting values provided to the method.

  Example
    ````
    const up = new Up.Transformer({
      parsing: {
        createSourceMap: true,
        fancyEllipsis: "â¯",
        keywords: {
          audio: ["sound", "song"],
          highlight: "mark"
        }
      },
      rendering: {
        terms: { tableOfContents: "Contents" }
      }
    })

    const html = up.parseAndRender(markup, {
      parsing: {
        createSourceMap: false,
        keywords: {
          audio: "listen"
        }
      },
      rendering: {
        idPrefix: "article"
      }
    })
    ````

  Discussion
    In the above example, the following settings are ultimately applied:

    ````
    {
      parsing: {
        createSourceMap: false,
        fancyEllipsis: "â¯",
        keywords: {
          audio: "listen",
          highlight: "mark"
        }
      },
      rendering: {
        idPrefix: "article",
        terms: { tableOfContents: "Contents" }
      }
    }
    ````



========================
The abstract syntax tree
========================

Unless you're fiddling with the abstract syntax tree of a parsed document, you don't need to worry about any of these classes or interfaces.


`Up.Document`
=============

Purpose
  This class represents the syntax tree for a parsed document.

Extends
  [topic: Up.OutlineSyntaxNodeContainer]

Unique members
  `tableOfContents`: [topic: Document.TableOfContents]
    An object representing the document's table of contents.

  `create` method (static)
    Purpose
      This method returns a ready-to-render syntax tree from a collection of outline syntax nodes.

    Arguments
      `children`: array of [topic: OutlineSyntaxNode]
        A collection of outline syntax nodes representing the top-level conventions in the document.

    Return type: [topic: Up.Document]
      This method creates and returns a ready-to-render `Document` object.

      To prepare the document for rendering, this method:

      - Assigns footnotes their reference numbers
      - Extracts footnotes into footnote blocks
      - Produces a table of contents
      - Associates section links with the apprioriate table of contents entries

Notes
  The [topic: Up.parse] function returns an instance of this class.


-----------------------------
`Up.Document.TableOfContents`
-----------------------------

Purpose
  This class represents the table of contents for a document. The table of contents includes every heading except those found within [topic: revealable content].

Members
  `entries`: array of [topic: TableOfContents.Entry]
    A collection of entries representing headings in the document.


`Up.Document.TableOfContents.Entry`
-----------------------------------

Purpose
  This interface represents an entry in the table of contents.

Members
  `ordinal`: `number`
    Represents the entry's ordinal in the table of contents. The first ordinal is `1`, not `0`.

  `level`: `number`
    Represents the heading level of the entry.

  `searchableText` method
    Arguments
      None.

    Return type: `string`
      This method returns the searchable text of the syntax node. In contrast to `textAppearingInline`, footnotes and images do have searchable text (footnotes have content, and images have a description).

      This is used to help [topic: section links] match the most appropriate table of content entry.

  `contentWithinTableOfContents` method
    Arguments
      None.

    Return type: array of [topic: Up.InlineSyntaxNode]
      This method returns the inline syntax nodes that should represent this entry's content inside the table of contents itself.

  `inlineDescendants`
    Return type: array of [topic: Up.InlineSyntaxNode]
      This method returns the inline descendants (children, grandchildren, etc.) of the syntax node represented by this table of contents entry.

    Arguments
      None.


`Up.InlineDocument`
==================

Purpose
  This class represents the syntax tree for a parsed inline document.

Extends
  [topic: Up.InlineSyntaxNodeContainer]

Notes
  The [topic: Up.parseInline] function returns an instance of this class.


`Up.SyntaxNode`
===============

Purpose
  All syntax node classes must implement this interface.

Members
  `inlineDescendants` method
    Return type: array of [topic: Up.InlineSyntaxNode]
      This method returns all inline descendants (including children, grandchildren, etc.).

Notes
  This interface also has a `render` method, but it isn't relevant to developers using the Up library.


`Up.InlineSyntaxNode`
=====================

Purpose
  All inline syntax node classes must implement this interface.

Extends
  [topic: Up.SyntaxNode]

Unique members
  `textAppearingInline` method
    Return type: `string`
      This method returns the text of the syntax node as it should appear inline. Some inline writing conventions don't have any text appearing inline, including [topic: footnotes] and [topic: images].

      This method is used to help determine whether table cells are numeric.

    Arguments
      None.

  `searchableText` method
    Return type: `string`
      This method returns the searchable text of the syntax node. In contrast to `textAppearingInline`, footnotes and images should have searchable text (footnotes have content, and images have a description).

      This method is used to help [topic: section links] match the most appropriate table of content entry.

    Arguments
      None.


`Up.OutlineSyntaxNode`
======================

Purpose
  All outline syntax node classes must implement this interface.

Extends
  [topic: Up.SyntaxNode]

Unique members
  `sourceLineNumber`: `number`
    The first line of markup that produced this syntax node. Source line numbers start at `1`, not `0`.

  `descendantsToIncludeInTableOfContents` method
    Return type: array of [topic: Up.Document.TableOfContents.Entry]
      This method returns any descendants (at any nesting level) to include in the table of contents.

    Arguments
      None.


`Up.RichInlineSyntaxNode`
=========================

Purpose
  This abstract class represents an inline syntax node that can contain other inline syntax nodes.

Extends
  [topic: Up.InlineSyntaxNodeContainer]

Implements
  [topic: Up.InlineSyntaxNode]


`Up.RichOutlineSyntaxNode`
=========================

Purpose
  This abstract class represents an outline syntax node that can contain other outline syntax nodes.

Extends
  [topic: Up.OutlineSyntaxNodeContainer]

Implements
  [topic: Up.OutlineSyntaxNode]


`Up.InlineSyntaxNodeContainer`
==============================

Purpose
  This abstract class represents a container of inline syntax nodes.

Members
  `children`: array of [topic: Up.InlineSyntaxNode]
    A collection of inline syntax nodes representing the top-level content of the container.

  `inlineDescendants` method
    Return type: array of [topic: Up.InlineSyntaxNode]
      This method returns all inline descendants (including `children`, grandchildren, etc.).

    Arguments
      None.


`Up.OutlineSyntaxNodeContainer`
==============================

Purpose
  This abstract class represents a container of inline syntax nodes.

Members
  `children`: array of [topic: Up.InlineSyntaxNode]
    A collection of outline syntax nodes representing the top-level content of the container.

  `descendantsToIncludeInTableOfContents` method
    Return type: array of [topic: Document.TableOfContents.Entry]
      This method returns any descendants (children, grandchildren, etc.) to include in the table of contents.

    Arguments
      None.

  `inlineDescendants` method
    Return type: array of [topic: Up.InlineSyntaxNode]
      This method returns all inline descendants of `children`.

    Arguments
      None.


`Up.MediaSyntaxNode`
====================

Purpose
  This abstract class represents a media convention.

Implements
  [topic: Up.InlineSyntaxNode]
    Media conventions can appear inline.
  [topic: Up.OutlineSyntaxNode]
    If a line consists solely of media conventions (or media conventions within links), those media conventions are placed directly into the outline.

Unique members
  `description`: `string`
    The media's description.

  `url`: `string`
    Represents the media's URL after the following settings are applied:

    - [topic: defaultUrlScheme]
    - [topic: baseForUrlsStartingWithSlash]
    - [topic: baseForUrlsStartingWithHashMark]


`Up.ParentheticalSyntaxNode`
===============================

Purpose
  This abstract class represents [topic: parentheticals]. It exists solely to improve the expressiveness of the type system.

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.Audio`
==========

Convention
  [topic: Audio]

Extends
  [topic: Up.MediaSyntaxNode]


`Up.Blockquote`
===============

Convention
  [topic: Blockquotes]

Extends
  [topic: Up.RichOutlineSyntaxNode]


`Up.Bold`
=========

Convention
  [topic: Audio]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.CodeBlock`
==============

Convention
  [topic: Code blocks]

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `code`: `string`
    The code represented by this syntax node.


`Up.DescriptionList`
====================

Convention
  [topic: Description lists]

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `items`: array of [topic: Up.DescriptionList.Item]
    The collection of items comprising this description list.


-------------------------
`Up.DescriptionList.Item`
-------------------------

Purpose
  This class represents a collection of subjects and their corresponding description.

Unique members
  `subjects`: array of [topic: Up.DescriptionList.Item.Subject]
    The subjects described by `description`.

  `description`: array of [topic: DescriptionList.Item.Description]
    The description of `subjects`.


`Up.DescriptionList.Item.Subject`
---------------------------------

Purpose
  This class represents the collection of subjects described by a given description within a description list item.

Extends
  [topic: Up.InlineSyntaxNodeContainer]


`Up.DescriptionList.Item.Description`
-------------------------------------

Purpose
  This class represents the description of a given collection of subjects within a description list item.

Extends
  [topic: Up.InlineSyntaxNodeContainer]


`Up.Emphasis`
=============

Convention
  [topic: Emphasis]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.ExampleInput`
=================

Convention
  [topic: Example input]

Implements
  [topic: Up.InlineSyntaxNode]

Unique members
  `input`: `string`
    The example of user input.


`Up.Footnote`
=============

Convention
  [topic: Footnotes]

Extends
  [topic: Up.RichInlineSyntaxNode]

Unique members
  `referenceNumber`: `number`
    The number that appears in superscript for this footnote.


`Up.FootnoteBlock`
==================

Purpose
  Footnotes are written inline, but they aren't meant to appear inline in the final document. That would defeat the purpose of footnotes! Instead, footnotes are extracted and placed in footnote blocks. This class represents one of those footnote blocks.

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `footnotes`: array of [topic: Up.Footnote]
    The collection of footnotes comprising this footnote block.


`Up.Heading`
=============

Convention
  [topic: Headings]

Extends
  [topic: Up.InlineSyntaxNodeContainer]

Implements
  [topic: Up.OutlineSyntaxNode]
    Headings are outline syntax nodes.

  [topic: Up.Document.TableOfContents.Entry]
    Headings can also be in the table of contents!

Unique members
  `level`: `number`
    Represents the significance of the heading. Like HTML heading levels, a `level` of `1` is considered the most significant.


`Up.Highlight`
==============

Convention
  [topic: Highlighting]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.Image`
==========

Convention
  [topic: Images]

Extends
  [topic: Up.MediaSyntaxNode]


`Up.InlineCode`
===============

Convention
  [topic: Inline code]

Implements
  [topic: Up.InlineSyntaxNode]

Unique members
  `code`: `string`
    The inline code represented by this syntax node.


`Up.InlineQuote`
================

Convention
  [topic: Inline quotes]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.InlineQuote`
================

Convention
  [topic: Inline revealables]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.Italic`
===========

Convention
  [topic: Italics]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.LineBlock`
==============

Convention
  [topic: Line blocks]

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `lines`: array of [topic: Up.LineBlock.Line]
    The collection of lines comprising this line block.

-------------------
`Up.LineBlock.Line`
-------------------

Purpose
  This class represents a line in a line block.

Extends
  [topic: Up.InlineSyntaxNodeContainer]


`Up.Link`
=========

Convention
  [topic: Italics]

Extends
  [topic: Up.RichInlineSyntaxNode]

Implements
  [topic: Up.OutlineSyntaxNode]
    If a line consists solely of media conventions or media conventions within links, those media conventions are placed directly into the outline. Therefore, links must be able to serve as outline syntax nodes.

Unique members
  `url`: `string`
    This links's URL after the following settings are applied:

    - [topic: defaultUrlScheme]
    - [topic: baseForUrlsStartingWithSlash]
    - [topic: baseForUrlsStartingWithHashmark]


`Up.NormalParenthetical`
========================

Convention
  [topic: Parentheses]

Extends
  [topic: Up.ParentheticalSyntaxNode]


`Up.OrderedList`
================

Convention
  [topic: Numbered lists]

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `items`: array of [topic: Up.OrderedList.Item]
    The collection of items comprising this ordered list.

  `start` method
    Return type: `number`
      This method returns the starting ordinal of this list, if one was explicitly defined. Otherwise, this method returns `undefined`.

    Arguments
      None.

  `order` method
    Return type: [topic: Up.OrderedList.Order]
      This method returns the order of the ordered list (ascending or descending).

    Arguments
      None.


---------------------
`Up.OrderedList.Item`
---------------------

Purpose
  This class represents an item in an ordered list.

Extends
  [topic: Up.OutlineSyntaxNodeContainer]


----------------------
`Up.OrderedList.Order`
----------------------

Purpose
  This enum represents the order of an ordered list.

Values
  - `Ascending` (default)
  - `Descending`


`Up.Paragraph`
==============

Convention
  [topic: Paragraphs]

Extends
  [topic: Up.InlineSyntaxNodeContainer]

Implements
  [topic: Up.OutlineSyntaxNode]
    Paragraphs are outline syntax nodes.


`Up.RevealableBlock`
====================

Convention
  [topic: Revealable blocks]

Extends
  [topic: Up.RichOutlineSyntaxNode]


`Up.SectionLink`
================

Convention
  [topic: Section links]

Implements
  [topic: Up.InlineSyntaxNode]

Unique members
  `sectionTitleSnippet`: `string`
    A snippet of text (provided by the author) from the matching table of contents entry.


`Up.SquareParenthetical`
========================

Convention
  [topic: Square brackets]

Extends
  [topic: Up.ParentheticalSyntaxNode]


`Up.Stress`
===========

Convention
  [topic: Stress]

Extends
  [topic: Up.RichInlineSyntaxNode]


`Up.Table`
==========

Convention
  [topic: Tables]

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `header`: [topic: Up.Table.Header]
    The header row.

  `rows`: array of [topic: Up.Table.Row]
    The content rows.

  `caption`: [topic: Up.Table.Caption]
    The optional caption.


------------------
`Up.Table.Caption`
------------------

Purpose
  This class represents the caption of a table.

Extends
  [topic: Up.InlineSyntaxNodeContainer]


---------------
`Up.Table.Cell`
---------------

Purpose
  This abstract class represents a table cell.

Extends
  [topic: Up.InlineSyntaxNodeContainer]

Unique members
  `isNumeric` method
    Return type: `boolean`
      This method returns a `boolean` indicating whether the content of this cell is numeric.

    Arguments
      None.


-----------------
`Up.Table.Header`
-----------------

Purpose
  This class represents the header row of a table.

Unique members
  `cells`: array of [topic: Up.Table.Header.Cell]
    The cells in this header row.


`Up.Table.Header.Cell`
----------------------

Purpose
  This class represents a table header cell.

Extends
  [topic: Up.Table.Cell]


--------------
`Up.Table.Row`
--------------

Purpose
  This class represents a content row in a table.

Unique members
  `cells`: array of [topic: Up.Table.Row.Cell]
    The content cells in this row.

  `headerColumnCell`: [topic: Up.Table.Header.Cell]
    The single header column cell for this row, if there is one.

    Tables without header columns never have header column cells.

  `allCellsStartingWithHeaderColumnCell` method
    Return type: array of [topic: Up.Table.Cell]
      This method returns every cell in this row.

      If the table has a header column, the row's `headerColumnCell` is the first item in the returned collection.

    Arguments
      None.


`Up.Table.Row.Cell`
-------------------

Purpose
  This class represents a regular (non-header) table cell.

Extends
  [topic: Up.Table.Cell]


`Up.Text`
=========

Purpose
  This class represents regular text content.

Implements
  [topic: Up.InlineSyntaxNode]

Unique members
  `text`: `string`
    The text represented by this syntax node.


`Up.ThematicBreak`
=================

Convention
  [topic: Thematic breaks]

Extends
  [topic: Up.OutlineSyntaxNode]


`Up.UnorderedList`
==================

Convention
  [topic: Bulleted lists]

Implements
  [topic: Up.OutlineSyntaxNode]

Unique members
  `items`: array of [topic: Up.UnorderedList.Item]
    The collection of items comprising this bulleted list.


-----------------------
`Up.UnorderedList.Item`
-----------------------

Purpose
  This class represents an item in a bulleted list.

Extends
  [topic: Up.OutlineSyntaxNodeContainer]


`Up.Video`
==========

Convention
  [topic: Video]

Extends
  [topic: Up.MediaSyntaxNode]
